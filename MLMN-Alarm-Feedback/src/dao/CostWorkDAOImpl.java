package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.CostExpenses;
import vo.CostWork;
import vo.SYS_PARAMETER;

public class CostWorkDAOImpl extends SqlMapClientDaoSupport implements CostWorkDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public CostWorkDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CostWork key = new CostWork();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("COST_WORK.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public void insert(CostWork record) {
        getSqlMapClientTemplate().insert("COST_WORK.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public void insertSelective(CostWork record) {
        getSqlMapClientTemplate().insert("COST_WORK.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public CostWork selectByPrimaryKey(Integer id) {
        CostWork key = new CostWork();
        key.setId(id);
        CostWork record = (CostWork) getSqlMapClientTemplate().queryForObject("COST_WORK.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public int updateByPrimaryKeySelective(CostWork record) {
        int rows = getSqlMapClientTemplate().update("COST_WORK.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_WORK
     *
     * @ibatorgenerated Thu May 09 09:42:43 ICT 2013
     */
    public int updateByPrimaryKey(CostWork record) {
        int rows = getSqlMapClientTemplate().update("COST_WORK.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

	@Override
	public List<CostWork> getCostWorkFilter(CostWork costWork, String column,
			int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		costWork.getExpensesCode());
    	parms.put("P_WORK_NAME", 			costWork.getWorkName());
    	parms.put("P_IS_ENABLE", 			costWork.getIsEnable());
    	parms.put("P_ORDER", 				order);
    	parms.put("P_COLUMN", 				column);
		parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CostWork> record = getSqlMapClientTemplate().queryForList("COST_WORK.getCostWorkFilter", parms);
        return record;
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleForm(String typeForm) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_TYPE_FORM", typeForm); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("COST_WORK.titleForm", map);
	
	}

	@Override
	public CostWork checkExit(String expensesCode, Integer workSuper,
			String workName) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
    	parms.put("P_WORK_SUPER", 		workSuper);
    	parms.put("P_WORK_NAME", 		workName);
    	
		parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostWork> record = getSqlMapClientTemplate().queryForList("COST_WORK.checkExit", parms);
        if (record.size()>0)
        	return record.get(0);
		return null;
	}

	@Override
	public List<String> getCostWorkSearch(String focus, String term) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("focus", 			focus);
    	parms.put("term", 			term);
		parms.put("P_DATA", null);
    	
		@SuppressWarnings("unchecked")
		List<String> record = getSqlMapClientTemplate().queryForList("COST_WORK.getCostWorkSearch", parms);
        return record;
	}

	@Override
	public int checkBeforeDalete(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_WORK_ID", id);
		parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_WORK.checkBeforeDalete", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CostWork> getWorkSuperList(String expensesCode, Integer id) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_EXPENSES_CODE", expensesCode);
		map.put("P_WORK_ID", id);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("COST_WORK.getWorkSuperList", map);
	}

	@Override
	public int updateRootNo(Integer id, Integer idSup, int num) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", id);
		parms.put("P_ID_SUPER", idSup);
    	parms.put("P_NUM", 		num);
        int rows = getSqlMapClientTemplate().update("COST_WORK.updateRootNo", parms);
        return rows;
	}

	@Override
	public Integer insertReturnIDnewWork(CostWork newWork) {
		
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		newWork.getExpensesCode());
    	parms.put("P_WORK_NAME", 			newWork.getWorkName());
    	parms.put("P_IS_ENABLE", 			newWork.getIsEnable());
    	parms.put("P_WORK_SUPER", 			newWork.getWorkSuper());
    	parms.put("P_ROOT_NO", 				newWork.getRootNo());
    	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_WORK.insertReturnIDnewWork", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<CostWork> getCostWorkChild(Integer id) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID_SUPER", id);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("COST_WORK.getCostWorkChild", map);
	}

}