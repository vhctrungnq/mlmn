package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.SmsContents;
import vo.W_WORKING_MANAGEMENTS;

public class W_WORKING_MANAGEMENTSDAOImpl extends SqlMapClientDaoSupport implements W_WORKING_MANAGEMENTSDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public W_WORKING_MANAGEMENTSDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public int deleteByPrimaryKey(Integer id) {
        W_WORKING_MANAGEMENTS key = new W_WORKING_MANAGEMENTS();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("W_WORKING_MANAGEMENTS.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public void insert(W_WORKING_MANAGEMENTS record) {
        getSqlMapClientTemplate().insert("W_WORKING_MANAGEMENTS.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public void insertSelective(W_WORKING_MANAGEMENTS record) {
        getSqlMapClientTemplate().insert("W_WORKING_MANAGEMENTS.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public W_WORKING_MANAGEMENTS selectByPrimaryKey(Integer id) {
        W_WORKING_MANAGEMENTS key = new W_WORKING_MANAGEMENTS();
        key.setId(id);
        W_WORKING_MANAGEMENTS record = (W_WORKING_MANAGEMENTS) getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public int updateByPrimaryKeySelective(W_WORKING_MANAGEMENTS record) {
        int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    
    public int updateByprimaryKeyForActualDate(W_WORKING_MANAGEMENTS record){
    	int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.ibatorgenerated_updateByPrimaryKeyForActualDate", record);
        return rows;
    }
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table W_WORKING_MANAGEMENTS
     *
     * @ibatorgenerated Fri Aug 10 13:57:50 ICT 2012
     */
    public int updateByPrimaryKey(W_WORKING_MANAGEMENTS record) {
        int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    
    public int insertAndResult(W_WORKING_MANAGEMENTS record) {
        Integer id = (Integer) getSqlMapClientTemplate().insert("W_WORKING_MANAGEMENTS.insertProduct-ORACLE", record);
        return id;
    }
    
	
	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_MANAGEMENTS> getWorkingManagementsFilter(Integer idWorkTypes, String maCongViec, String tenCongViec, String nguoiGiaoViec, String nguoiChuTri, String nguoiNhanViec,
			String tinhTrang, String actualDateFrom, String actualDateTo, String assignDateFrom, String assignDateTo, String column, String order,String received,String username,String deptName
			, String strWhere, Integer startRecord, Integer endRecord){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID_WORK_TYPES", idWorkTypes);
		map.put("P_MA_CONG_VIEC", maCongViec);
		map.put("P_TEN_CONG_VIEC", tenCongViec);
		map.put("P_NGUOI_GIAO_VIEC", nguoiGiaoViec);
		map.put("P_NGUOI_CHU_TRI", nguoiChuTri);
		map.put("P_NGUOI_NHAN_VIEC", nguoiNhanViec);
		map.put("P_TINH_TRANG", tinhTrang);
		map.put("P_ACTUAL_DATE_FROM", actualDateFrom);
		map.put("P_ACTUAL_DATE_TO", actualDateTo);
		map.put("P_ASSIGN_DATE_FROM", assignDateFrom);
		map.put("P_ASSIGN_DATE_TO", assignDateTo);
		map.put("P_RECEIVED", received);
		map.put("P_USERNAME", username);
		map.put("P_DEPTNAME", deptName);
		map.put("P_COLUMN", column);
		map.put("P_ORDER", order);
		map.put("P_WHERE", strWhere);
		map.put("P_START_RECORD", startRecord);
		map.put("P_END_RECORD", endRecord);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.getWorkingManagementsFilter", map);
	}
	
	@Override
	public W_WORKING_MANAGEMENTS selectJoinByPrimaryKey(Integer id){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID", id);
		map.put("P_DATA", null);
		W_WORKING_MANAGEMENTS record = (W_WORKING_MANAGEMENTS) getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.selectJoinByPrimaryKey", map);
		return record;
	}
	
	@SuppressWarnings("unchecked")
	public List<W_WORKING_MANAGEMENTS> getIDWorking_Types() {
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.idWorkTypes");
	}
	
	@Override
	public String getNameWorking_Types(String nameWorkTypes){
		return (String) getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.nameWorkTypes", nameWorkTypes);
	}
	
	@Override
	public String getNameWorking_Mana(String idWorkMana){
		return (String) getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.idWorkMana", idWorkMana);
	}
	
	@SuppressWarnings("unchecked")
	public List<W_WORKING_MANAGEMENTS> getIdWorksTypes(String idWorkTypes) {
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.idWorkingManagements", idWorkTypes);
	}
	
	@Override
	public Integer countWorkingManaByIDWorksTypes(Integer idWorkTypes){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("idWorkTypes", idWorkTypes);
		
		return (Integer) getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.countWorkingManaByIDWorksTypes", map);
	}
	
	@Override
	public int updateTinhTrangCV(W_WORKING_MANAGEMENTS record){
    	int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.updateTinhTrangCV", record);
        return rows;
    }

	@Override
	public int insertWorkInShift(String tenCongViec, String noiDung,
			Integer year, Integer week, String department, String team,
			String estimateDate, String actualDate, String username,
			Integer idwork,String region) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_TEN_CONG_VIEC", tenCongViec);
       	parms.put("P_NOI_DUNG", noiDung);
   		parms.put("P_YEAR", year);
   		parms.put("P_WEEK", week);
   		parms.put("P_DEPT", department);
   		parms.put("P_TEAM", team);
   		parms.put("P_ESTIMATE_DATE", estimateDate);
   		parms.put("P_ACTUAL_DATE", actualDate);
   		parms.put("P_NGUOI_GIAO_VIEC", username);
   		parms.put("P_ID", idwork);
   		parms.put("P_REGION", region);
           int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.insertWorkInShift", parms);
           return rows;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_MANAGEMENTS> getWorkInShift(Integer year,
			Integer week, String department, String team,String region) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_YEAR", year);
		map.put("P_WEEK", week);
		map.put("P_DEPT", department);
		map.put("P_TEAM", team);
		map.put("P_REGION", region);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.getWorkInShift", map);
	}

	@Override
	public int sendSMS(SmsContents record) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_POSITION",null);
   		parms.put("P_ISDN", record.getIsdn());
   		parms.put("P_ALARM_TYPE", record.getAlarmType());
   		parms.put("P_MESSAGE", record.getMessage());
   		parms.put("P_USERNAME", record.getUsername());
   		
       int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.sendSMS", parms);
       return rows;
	}

	@Override
	public int saveManagerSend(Integer id, String nguoiChuTri,
			String nguoiNhanViec,Integer finishRate,String userName) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_ID",id);
   		parms.put("P_NGUOI_CHU_TRI", nguoiChuTri);
   		parms.put("P_NGUOI_NHAN_VIEC",nguoiNhanViec);
   		parms.put("P_FINISH_RATE",finishRate);
   		parms.put("P_USERNAME",userName);
       int rows = getSqlMapClientTemplate().update("W_WORKING_MANAGEMENTS.saveManagerSend", parms);
       return rows;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_MANAGEMENTS> getMailList(Integer id) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID", id);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.getMailList", map);
	}

	@Override
	public int deleteWorkingManagerMail(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_ID",id);
       int rows = getSqlMapClientTemplate().delete("W_WORKING_MANAGEMENTS.deleteWorkingManagerMail", parms);
       return rows;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_MANAGEMENTS> getWorkingChildren(Integer id, String order2,	String column2) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID", id);
		map.put("P_COLUMN", column2);
		map.put("P_ORDER", order2);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.getWorkingChildren", map);
	}

	@Override
	public Integer checkRoleAllowRate(String username, Integer idWork) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_USERNAME", username);
		map.put("P_IDWORK", idWork);
		map.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.checkRoleAllowRate", map);
          	Integer record = (Integer) map.get("P_DATA");
          	return record;
	}

	@Override
	public int countChild(Integer id) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_IDWORK", id);
		map.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.countChild", map);
          	Integer record = (Integer) map.get("P_DATA");
          	return record;
	}
	//Thong ke danh sach cong viec cho cham diem ca nhan. status: trang thai xu ly.
	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_MANAGEMENTS> getWorkingDetailInAssess(String dateF,
			String dateT, String catruc, String users, String type,
			String status,String columnheader) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATE_FROM", dateF);
		map.put("P_DATE_TO", dateT);
		map.put("P_SHIFT", catruc);
		map.put("P_USERS", users);
		map.put("P_STATUS", status);
		map.put("P_TYPE", type);
		map.put("P_COLUMNHEADER", columnheader);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_MANAGEMENTS.getWorkingDetailInAssess", map);
	}

	
	@Override
	public int countWorkingManagement(Integer idWorkTypes, String maCongViec,
			String tenCongViec, String nguoiGiaoViec, String nguoiChuTri,
			String nguoiNhanViec, String tinhTrang, String actualDateFrom,
			String actualDateTo, String assignDateFrom, String assignDateTo,
			String received, String username, String deptName) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_ID_WORK_TYPES", idWorkTypes);
		map.put("P_MA_CONG_VIEC", maCongViec);
		map.put("P_TEN_CONG_VIEC", tenCongViec);
		map.put("P_NGUOI_GIAO_VIEC", nguoiGiaoViec);
		map.put("P_NGUOI_CHU_TRI", nguoiChuTri);
		map.put("P_NGUOI_NHAN_VIEC", nguoiNhanViec);
		map.put("P_TINH_TRANG", tinhTrang);
		map.put("P_ACTUAL_DATE_FROM", actualDateFrom);
		map.put("P_ACTUAL_DATE_TO", actualDateTo);
		map.put("P_ASSIGN_DATE_FROM", assignDateFrom);
		map.put("P_ASSIGN_DATE_TO", assignDateTo);
		map.put("P_RECEIVED", received);
		map.put("P_USERNAME", username);
		map.put("P_DEPTNAME", deptName);
		map.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.countWorkingManagement", map);
          	Integer record = (Integer) map.get("P_DATA");
          	return record;
	}

	@Override
	public Integer checkRoleAllowDelete(String username, Integer id,
			String received) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_USERNAME", username);
		map.put("P_IDWORK", id);
		map.put("P_RECEIVED", received);
		map.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("W_WORKING_MANAGEMENTS.checkRoleAllowDelete", map);
          	Integer record = (Integer) map.get("P_DATA");
          	return record;
	}

}