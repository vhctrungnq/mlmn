package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.SYS_PARAMETER;
import vo.SysUsers;

public class SysUsersDAOImpl extends SqlMapClientDaoSupport implements SysUsersDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public SysUsersDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int deleteByPrimaryKey(String id) {
        int rows = getSqlMapClientTemplate().delete("SYS_USERS.ibatorgenerated_deleteByPrimaryKey", id);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public void insert(SysUsers record) {
        getSqlMapClientTemplate().insert("SYS_USERS.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public void insertSelective(SysUsers record) {
        getSqlMapClientTemplate().insert("SYS_USERS.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public SysUsers selectByPrimaryKey(String username) {
        SysUsers key = new SysUsers();
        key.setUsername(username);
        SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }
    
    public SysUsers selectByID(String id) {
        SysUsers key = new SysUsers();
        key.setId(Integer.parseInt(id));
        SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectByID", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int updateByPrimaryKeySelective(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int updateByPrimaryKey(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	public List<SysUsers> getUsersFilter(String maPhong, String username, String email, String phone, String isEnable, 
			String rolesAddUsers, String fullName, String column, String order){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_USERNAME", username);
		parms.put("P_EMAIL", email);
		parms.put("P_PHONE", phone);
		parms.put("P_IS_ENABLE", isEnable);
		parms.put("P_ROLES_ADD_USERS", rolesAddUsers);
		parms.put("P_FULLNAME", fullName);
		parms.put("P_COLUMN", column);
		parms.put("P_ORDER", order);
		parms.put("P_DATA", null);
		
		List<SysUsers> record = (List<SysUsers>) getSqlMapClientTemplate().queryForList("SYS_USERS.getUsersFilter", parms);
		
		return record;
	}
    
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> selectSysUsers(){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.selectSysUsers", parms);
		List<SysUsers> record = (List<SysUsers>) parms.get("P_DATA");
		
		return record;
	}
	
	public int updateIsEnable(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.updateIsEnable", record);
        return rows;
    }
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> getUserByMaPhong(String maPhong){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByMaPhong", parms);
		List<SysUsers> record = (List<SysUsers>)parms.get("P_DATA");
		
		return record;
	}
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> getUsersByMaPhongDontId(String maPhong, Integer id){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_ID", id);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.getUsersByMaPhongDontId", parms);
		List<SysUsers> record = (List<SysUsers>) parms.get("P_DATA");
		
		return record;
	}
	
	public int selectByUsernamePassword(String username, String password){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_PASSWORD", password);
		parms.put("P_DATA", null);
		getSqlMapClientTemplate().queryForObject("SYS_USERS.selectByUsernamePassword", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record;
	}
	
	public int updatePasswordForUsername(String username, String password) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_PASSWORD", password);
        int rows = getSqlMapClientTemplate().update("SYS_USERS.updatePasswordForUsername", parms);
        return rows;
    }
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> selectAllSysUsers(){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.selectAllSysUsers", parms);
		
		return record;
	}
	
	@Override
	public SysUsers selectSysUsersByUsername(String username){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
		SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectSysUsersByUsername", parms);
		return record;
		
	}

	@Override
	public SysUsers selectSysUsersByfullName(String user) {
		SysUsers key = new SysUsers();
		key.setFullname(user);
		 SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectSysUsersByfullName", key);
	        return record;
	}
	
	@SuppressWarnings("unchecked")
	@Override
    public List<SYS_PARAMETER> titleSysUsers(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.titleSysUsers", parms);
    }
    
    @SuppressWarnings("unchecked")
	@Override
    public List<SYS_PARAMETER> getQuyenTaoNDList(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getQuyenTaoNDList", parms);
    }
    
    @SuppressWarnings("unchecked")
	@Override
    public List<SYS_PARAMETER> getTrangThaiList(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getTrangThaiList", parms);
    }
    
    @SuppressWarnings("unchecked")
	@Override
    public List<SYS_PARAMETER> titleDoiMatKhau(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.titleDoiMatKhau", parms);
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> selectUsersOfAlarm() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.selectUsersOfAlarm", parms);
		
		return record;
	}

    @SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> checkUser(String userN) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", userN);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.checkUser", parms);
	}
    
    @SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserByUsername(String username) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByUsername", parms);
	}
    
    @Override
    public boolean getCountUserOfModule(String username, String system){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_SYSTEM", system);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForObject("SYS_USERS.getCountUserOfModule", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record>=1?true:false;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserByGroupSMS(String group) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_GROUP_SMS", group);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByGroupSMS", parms);
	}
    
	/*@Override
    public int updateRolesForUsername(String username, String receivingSms, String receivingEmail, String rolesAddUsers, String modifiedBy) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_RECEIVING_SMS", receivingSms);
		parms.put("P_RECEIVING_EMAIL", receivingEmail);
		parms.put("P_ROLES_ADD_USERS", rolesAddUsers);
		parms.put("P_MODIFIED_BY", modifiedBy);
    	
        getSqlMapClientTemplate().queryForObject("SYS_USERS.updateRolesForUsername", parms);
        return 1;
    }*/
	@Override
	public int updateRolesForUsername(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.updateRolesForUsername", record);
        return rows;
    }
	
	@Override
    public int updateSysUserArea(String id, String isEnable, String alarmKpi) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", id);
		parms.put("P_IS_ENABLE", isEnable);
		parms.put("P_ALARM_KPI", alarmKpi);
    	
        getSqlMapClientTemplate().queryForObject("SYS_USERS.updateSysUserArea", parms);
        return 1;
    }
	
	@Override
    public int smsAddIsdn(String phone, String username) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_PHONE", phone);
		parms.put("P_USERNAME", username);
    	
        getSqlMapClientTemplate().queryForObject("SYS_USERS.smsAddIsdn", parms);
        return 1;
    }
	
	@Override
    public int copyRoleToUsernameNew(String username, String createdBy, String usernameNew, String passwordNew, String emailNew) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_CREATED_BY", createdBy);
		parms.put("P_USERNAME_NEW", usernameNew);
		parms.put("P_PASSWORK_NEW", passwordNew);
		parms.put("P_EMAIL_NEW", emailNew);
        getSqlMapClientTemplate().queryForObject("SYS_USERS.copyRoleToUsernameNew", parms);
        return 1;
    }
	
	@Override
    public int deleteRoleByUsername(String username) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
    	
        getSqlMapClientTemplate().queryForObject("SYS_USERS.deleteRoleByUsername", parms);
        return 1;
    }
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getCheckSysUsersByEmail(String email, String id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_EMAIL", email);
		parms.put("P_ID", id);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getCheckSysUsersByEmail", parms);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<String> getContactUser(String depCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DEPT", depCode);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getContactUser", parms);
	}
	
	@SuppressWarnings("unchecked")
    @Override
	public List<SysUsers> checkEmailOfShift(String email) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_EMAIL", email);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("SYS_USERS.checkEmailOfShift", map);
    }
	@SuppressWarnings("unchecked")
	@Override
	public SysUsers getUserByPhone(String phoneNumber) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_PHONE", phoneNumber);
		parms.put("P_DATA", null);
		List<SysUsers>  recordL =  getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByPhone", parms);
		SysUsers record = new SysUsers();
		if (recordL.size()>0)
		{
			record = recordL.get(0);
		}
		return record;
	}
/*
	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserAllByMaPhong(String maPhong) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.getUserAllByMaPhong", parms);
		
		return record;
	}*/
	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserAllByMaPhong(String dept, String team) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", dept);
		parms.put("P_TEAM", team);
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.getUserAllByMaPhong", parms);
		
		return record;
	}
	  @SuppressWarnings("unchecked")
		@Override
		public List<SysUsers> checkRole(String userN) {
			Map<String, Object> parms = new HashMap<String, Object>();
			parms.put("P_USERNAME", userN);
			parms.put("P_DATA", null);
	    	return getSqlMapClientTemplate().queryForList("SYS_USERS.checkRole", parms);
		}
	//lay user co chuc vu ngang bang hoac be hon nguoi giao viec
    @SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserForWork(String deptCode, String diliver) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", deptCode);
		parms.put("P_DILIVER", diliver);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getUserForWork", parms);
	}
  //lay thong tin Use kèm theo một số thông tin như khu vực use trực thuộc. AnhCTV:16/11/2015
	 @SuppressWarnings("unchecked")
	@Override
	public SysUsers selectByUsename(String username) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
		List<SysUsers>  recordL =  getSqlMapClientTemplate().queryForList("SYS_USERS.selectByUsename", parms);
		SysUsers record = new SysUsers();
		if (recordL.size()>0)
		{
			record = recordL.get(0);
		}
		return record;
	}

	// check=1: user thuoc phong ky thuat. Lay thong tin dai vt tu du lieu import, nguoc lai: lay thong tin dai vt la phong ban cua user truc thuoc. AnhCTV:13/11/2017
	@Override
	public int getUserRoleQLDN(String username) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
		getSqlMapClientTemplate().queryForObject("SYS_USERS.getUserRoleQLDN", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SysUsers> getUserByDeptDistrict(String deptProcess,
			String district) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", deptProcess);
		parms.put("P_DISTRICT", district);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByDeptDistrict", parms);
	}

}