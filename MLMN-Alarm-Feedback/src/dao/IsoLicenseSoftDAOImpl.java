package dao;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.IsoLicenseSoft;

public class IsoLicenseSoftDAOImpl extends SqlMapClientDaoSupport implements IsoLicenseSoftDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public IsoLicenseSoftDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public int deleteByPrimaryKey(Date day, String featureCode, String ne, String vendor) {
        IsoLicenseSoft key = new IsoLicenseSoft();
        key.setDay(day);
        key.setFeatureCode(featureCode);
        key.setNe(ne);
        key.setVendor(vendor);
        int rows = getSqlMapClientTemplate().delete("ISO_LICENSE_SOFT.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }
    
    @Override
    public int deleteById(Integer id) {
        IsoLicenseSoft key = new IsoLicenseSoft();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("ISO_LICENSE_SOFT.deleteById", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public void insert(IsoLicenseSoft record) {
        getSqlMapClientTemplate().insert("ISO_LICENSE_SOFT.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public void insertSelective(IsoLicenseSoft record) {
        getSqlMapClientTemplate().insert("ISO_LICENSE_SOFT.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public IsoLicenseSoft selectByPrimaryKey(Date day, String featureCode, String ne, String vendor) {
        IsoLicenseSoft key = new IsoLicenseSoft();
        key.setDay(day);
        key.setFeatureCode(featureCode);
        key.setNe(ne);
        key.setVendor(vendor);
        IsoLicenseSoft record = (IsoLicenseSoft) getSqlMapClientTemplate().queryForObject("ISO_LICENSE_SOFT.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }
    
    @Override
    public IsoLicenseSoft selectById(Integer id) {
    	IsoLicenseSoft key = new IsoLicenseSoft();
        key.setId(id);
        IsoLicenseSoft record = (IsoLicenseSoft) getSqlMapClientTemplate().queryForObject("ISO_LICENSE_SOFT.selectById", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public int updateByPrimaryKeySelective(IsoLicenseSoft record) {
        int rows = getSqlMapClientTemplate().update("ISO_LICENSE_SOFT.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table ISO_LICENSE_SOFT
     *
     * @ibatorgenerated Fri Sep 06 11:21:29 ICT 2013
     */
    public int updateByPrimaryKey(IsoLicenseSoft record) {
        int rows = getSqlMapClientTemplate().update("ISO_LICENSE_SOFT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @Override
    public int updateById(IsoLicenseSoft record) {
        int rows = getSqlMapClientTemplate().update("ISO_LICENSE_SOFT.updateById", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<IsoLicenseSoft> getIsoLicenseSoftFilter(String startDate, String endDate, String vendor, String neType, String neName, String featureCode, String featureName,
			Integer startRecord, Integer endRecord,
			String sortfield, String sortorder, String strWhere) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
    	map.put("P_VENDOR", vendor);
    	map.put("P_NE_TYPE", neType);
    	map.put("P_NE_NAME", neName); 
    	map.put("P_FEATURE_CODE", featureCode);
    	map.put("P_FEATURE_NAME", featureName);
    	map.put("P_START_RECORD", startRecord);
    	map.put("P_END_RECORD", endRecord);
    	map.put("P_SOFT_FIELD", sortfield);
    	map.put("P_SOFT_ORDER", sortorder);
    	map.put("P_STR_WHERE", strWhere);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("ISO_LICENSE_SOFT.getIsoLicenseSoftFilter", map);
    }
    
    @Override
    public int countIsoLicenseSoftFilter(String startDate, String endDate, String vendor, String neType, String neName, String featureCode, String featureName, String strWhere){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
    	map.put("P_VENDOR", vendor);
    	map.put("P_NE_TYPE", neType);
    	map.put("P_NE_NAME", neName); 
    	map.put("P_FEATURE_CODE", featureCode);
    	map.put("P_FEATURE_NAME", featureName);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("ISO_LICENSE_SOFT.countIsoLicenseSoftFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<IsoLicenseSoft> getIsoSoftUtilityFilter(String startDate,
			String endDate , String vendor, String neType, String neName, String featureCode, String featureName) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
    	map.put("P_VENDOR", vendor);
    	map.put("P_NE_TYPE", neType);
    	map.put("P_NE_NAME", neName); 
    	map.put("P_FEATURE_CODE", featureCode);
    	map.put("P_FEATURE_NAME", featureName);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("ISO_LICENSE_SOFT.getIsoSoftUtilityFilter", map);
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<IsoLicenseSoft> getUpdateIsoLicenseSoft(String date, String vendor, String neName, String featureCode, String id) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_DATE", date);
    	map.put("P_VENDOR", vendor);
    	map.put("P_NE_NAME", neName);
    	map.put("P_FEATURE_CODE", featureCode);
    	map.put("P_ID", id);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("ISO_LICENSE_SOFT.getUpdateIsoLicenseSoft", map);
    }
}