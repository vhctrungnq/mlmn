package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.DyTrx;

public class DyTrxDAOImpl extends SqlMapClientDaoSupport implements DyTrxDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_TRX
     *
     * @ibatorgenerated Wed Feb 12 10:55:45 ICT 2014
     */
    public DyTrxDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_TRX
     *
     * @ibatorgenerated Wed Feb 12 10:55:45 ICT 2014
     */
    public void insert(DyTrx record) {
        getSqlMapClientTemplate().insert("DY_TRX.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_TRX
     *
     * @ibatorgenerated Wed Feb 12 10:55:45 ICT 2014
     */
    public void insertSelective(DyTrx record) {
        getSqlMapClientTemplate().insert("DY_TRX.ibatorgenerated_insertSelective", record);
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<DyTrx> getDyTrxFilter(
			String vendor,
			String bscid,
			String siteCell,
			String trx,
			String status,
			String network,
			Integer startRecord, 
			Integer endRecord, 
			String sortfield, 
			String sortorder, 
			String strWhere) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_VENDOR", vendor);
		parms.put("P_BSCID", bscid);
		parms.put("P_SITE_CELL", siteCell);
		parms.put("P_TRX", trx);
		parms.put("P_STATUS", status);
		parms.put("P_NETWORK", network);
		parms.put("P_END_RECORD", endRecord);
		parms.put("P_SOFT_FIELD", sortfield);
		parms.put("P_SOFT_ORDER", sortorder);
		parms.put("P_STR_WHERE", strWhere);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("DY_TRX.getDyTrxFilter", parms);
	}
    
    @Override
    public int countDyTrxFilter(
    		String vendor,
			String bscid,
			String siteCell,
			String trx,
			String status,
			String network,
			String strWhere){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_VENDOR", vendor);
    	map.put("P_BSCID", bscid);
    	map.put("P_SITE_CELL", siteCell);
    	map.put("P_TRX", trx);
    	map.put("P_STATUS", status);
    	map.put("P_NETWORK", network);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("DY_TRX.countDyTrxFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
}