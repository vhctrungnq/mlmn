package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.W_WORKING_TYPES;

public class W_WORKING_TYPESDAOImpl extends SqlMapClientDaoSupport implements W_WORKING_TYPESDAO {

    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public W_WORKING_TYPESDAOImpl() {
		super();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public int deleteByPrimaryKey(Integer id) {
		W_WORKING_TYPES key = new W_WORKING_TYPES();
		key.setId(id);
		int rows = getSqlMapClientTemplate().delete(
				"W_WORKING_TYPES.ibatorgenerated_deleteByPrimaryKey", key);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public void insert(W_WORKING_TYPES record) {
		getSqlMapClientTemplate().insert(
				"W_WORKING_TYPES.ibatorgenerated_insert", record);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public void insertSelective(W_WORKING_TYPES record) {
		getSqlMapClientTemplate().insert(
				"W_WORKING_TYPES.ibatorgenerated_insertSelective", record);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public W_WORKING_TYPES selectByPrimaryKey(Integer id) {
		W_WORKING_TYPES key = new W_WORKING_TYPES();
		key.setId(id);
		W_WORKING_TYPES record = (W_WORKING_TYPES) getSqlMapClientTemplate().queryForObject("W_WORKING_TYPES.ibatorgenerated_selectByPrimaryKey",
						key);
		return record;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public int updateByPrimaryKeySelective(W_WORKING_TYPES record) {
		int rows = getSqlMapClientTemplate().update(
				"W_WORKING_TYPES.ibatorgenerated_updateByPrimaryKeySelective",
				record);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table W_WORKING_TYPES
	 * @ibatorgenerated  Mon Jun 18 11:16:23 ICT 2012
	 */
	public int updateByPrimaryKey(W_WORKING_TYPES record) {
		int rows = getSqlMapClientTemplate().update(
				"W_WORKING_TYPES.ibatorgenerated_updateByPrimaryKey", record);
		return rows;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_TYPES> filter(W_WORKING_TYPES filter) {

		return getSqlMapClientTemplate().queryForList("W_WORKING_TYPES.filter", filter);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_TYPES> getWorkingTypesAll(){
		return getSqlMapClientTemplate().queryForList("W_WORKING_TYPES.getWorkingTypesAll");
	}
	
	@SuppressWarnings("unchecked")
	public List<W_WORKING_TYPES> getWorkingTypesFilter(String name, String ordering){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("name", name);
		map.put("ordering", ordering);
		
		return getSqlMapClientTemplate().queryForList("W_WORKING_TYPES.getWorkingTypesFilter", map);
	}
	
	@Override
	public Integer countRow(W_WORKING_TYPES filter) {
		return (Integer) getSqlMapClientTemplate().queryForObject("W_WORKING_TYPES.countRow",
				filter);
	}
	
	@Override
	public Integer countNameTogether(String name) {
		return (Integer) getSqlMapClientTemplate().queryForObject("W_WORKING_TYPES.countNameTogether", name);
	}
	
	@Override
	public Integer countNameDontId(W_WORKING_TYPES filter) {
		return (Integer) getSqlMapClientTemplate().queryForObject("W_WORKING_TYPES.countNameDontId",
				filter);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_TYPES> getWorkingNameShift() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_TYPES.getWorkingNameShift", map);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<W_WORKING_TYPES> getWorkingTypes(String maCongViec, String tenCongViec, String nguoiGiaoViec, String nguoiChuTri, String nguoiNhanViec, 
			String tinhTrang, String actualDateFrom, String actualDateTo, String assignDateFrom, String assignDateTo) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_MA_CONG_VIEC", maCongViec);
		map.put("P_TEN_CONG_VIEC", tenCongViec);
		map.put("P_NGUOI_GIAO_VIEC", nguoiGiaoViec);
		map.put("P_NGUOI_CHU_TRI", nguoiChuTri);
		map.put("P_NGUOI_NHAN_VIEC", nguoiNhanViec);
		map.put("P_TINH_TRANG", tinhTrang);
		map.put("P_ACTUAL_DATE_FROM", actualDateFrom);
		map.put("P_ACTUAL_DATE_TO", actualDateTo);
		map.put("P_ASSIGN_DATE_FROM", assignDateFrom);
		map.put("P_ASSIGN_DATE_TO", assignDateTo);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("W_WORKING_TYPES.getWorkingTypes", map);
	}
}