package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.CTableConfig;
import vo.SYS_PARAMETER;

public class CTableConfigDAOImpl extends SqlMapClientDaoSupport implements CTableConfigDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public CTableConfigDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CTableConfig key = new CTableConfig();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("C_TABLE_CONFIG.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public void insert(CTableConfig record) {
        getSqlMapClientTemplate().insert("C_TABLE_CONFIG.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public void insertSelective(CTableConfig record) {
        getSqlMapClientTemplate().insert("C_TABLE_CONFIG.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public CTableConfig selectByPrimaryKey(Integer id) {
        CTableConfig key = new CTableConfig();
        key.setId(id);
        CTableConfig record = (CTableConfig) getSqlMapClientTemplate().queryForObject("C_TABLE_CONFIG.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public int updateByPrimaryKeySelective(CTableConfig record) {
        int rows = getSqlMapClientTemplate().update("C_TABLE_CONFIG.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_TABLE_CONFIG
     *
     * @ibatorgenerated Tue Oct 08 18:20:28 PDT 2013
     */
    public int updateByPrimaryKey(CTableConfig record) {
        int rows = getSqlMapClientTemplate().update("C_TABLE_CONFIG.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @Override
	public List<CTableConfig> getTableConfigsForGrid(String tableName) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_TABLE_NAME", 		tableName);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CTableConfig> record = getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getTableConfigsForGrid", parms);
        return record;
	}

	@Override
	public List<CTableConfig> getColumnList(String tableName) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_TABLE_NAME", 		tableName);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CTableConfig> record = getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getColumnList", parms);
        return record;
	}
	
	@Override
	public List<CTableConfig> getTableConfigGet(String tableName, String columnName) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_TABLE_NAME", 		tableName);
    	parms.put("P_COLUMN_NAME", 		columnName);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CTableConfig> record = getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getTableConfigGet", parms);
        return record;
	}

	@Override
	public List<String> getGroupList(String nameTable) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_TABLE_NAME", 		nameTable);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<String> record = getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getGroupList", parms);
        return record;
	}

	@Override
	public List<CTableConfig> getColumnMailList(String tableName, String blockId) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_TABLE_NAME", 		tableName);
    	parms.put("P_BLOCK_ID", 		blockId);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CTableConfig> record = getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getColumnMailList", parms);
        return record;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleReportMail(String function, String mailid,
			String blockid) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_FUNCTION", function);  
		map.put("P_MAILID", mailid); 
		map.put("P_BLOCKID", blockid); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.titleReportMail", map);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CTableConfig> getColumnReportBlock(String reportType, String blockId) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_REPORT_TYPE", reportType);  
		map.put("P_BLOCKID", blockId); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.getColumnReportBlock", map);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleReportUCTT(String function, String region) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_FUNCTION", function);  
		map.put("P_REGION", region); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_TABLE_CONFIG.titleReportUCTT", map);
	}
}