package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.CostExpenses;
import vo.SYS_PARAMETER;

public class CostExpensesDAOImpl extends SqlMapClientDaoSupport implements CostExpensesDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public CostExpensesDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CostExpenses key = new CostExpenses();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("COST_EXPENSES.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public void insert(CostExpenses record) {
        getSqlMapClientTemplate().insert("COST_EXPENSES.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public void insertSelective(CostExpenses record) {
        getSqlMapClientTemplate().insert("COST_EXPENSES.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public CostExpenses selectByPrimaryKey(Integer id) {
        CostExpenses key = new CostExpenses();
        key.setId(id);
        CostExpenses record = (CostExpenses) getSqlMapClientTemplate().queryForObject("COST_EXPENSES.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public int updateByPrimaryKeySelective(CostExpenses record) {
        int rows = getSqlMapClientTemplate().update("COST_EXPENSES.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_EXPENSES
     *
     * @ibatorgenerated Tue May 07 16:15:11 ICT 2013
     */
    public int updateByPrimaryKey(CostExpenses record) {
        int rows = getSqlMapClientTemplate().update("COST_EXPENSES.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    

	
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleForm(String typeForm) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_TYPE_FORM", typeForm); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("COST_EXPENSES.titleForm", map);
	
	}

	@Override
	public CostExpenses checkExit(String expensesCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
    	
		parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.checkExit", parms);
        if (record.size()>0)
        	return record.get(0);
		return null;
	}

	@Override
	public List<CostExpenses> getExpensesBySupper(String expensesCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
    	
		parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getExpensesBySupper", parms);
		return record;
	}

	@Override
	public int deleteByExpensesCode(String expensesCode) {
		CostExpenses key = new CostExpenses();
        key.setExpensesCode(expensesCode);
        int rows = getSqlMapClientTemplate().delete("COST_EXPENSES.deleteByExpensesCode", key);
        return rows;
		
	}

	@Override
	public List<String> getCostExpensesSearch(String focus, String term) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("focus", 			focus);
    	parms.put("term", 			term);
		parms.put("P_DATA", null);
    	
		@SuppressWarnings("unchecked")
		List<String> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getCostExpensesSearch", parms);
        return record;
	}

	@Override
	public List<CostExpenses> getAll() {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getAll", parms);
		return record;
	}

	@Override
	public List<CostExpenses> getExpensesSuper() {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getExpensesSuper", parms);
		return record;
	}

	@Override
	public List<CostExpenses> getExpensesChild(String expensesSupper) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_SUPER", 		expensesSupper);
    	
		parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getExpensesChild", parms);
		return record;
	}

	@Override
	public List<CostExpenses> getExpensesSuperAll() {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DATA", 	null);
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getExpensesSuperAll", parms);
		return record;
	}

	@Override
	public int updateRootNo(String expensesCode, int num) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_EXPENSES_CODE", expensesCode);
    	parms.put("P_NUM", 			num);
        int rows = getSqlMapClientTemplate().update("COST_EXPENSES.updateRootNo", parms);
        return rows;
	}

	@Override
	public int checkBeforeDalete(String expensesCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", expensesCode);
		parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_EXPENSES.checkBeforeDalete", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}

	@Override
	public List<CostExpenses> getCostExpensesFilter(CostExpenses costExpenses,
			String column, int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_EXPENSES_CODE", 		costExpenses.getExpensesCode());
    	parms.put("P_EXPENSES_NAME", 		costExpenses.getExpensesName());
    	parms.put("P_IS_ENABLE", 			costExpenses.getIsEnable());
    	parms.put("P_ORDER", 				order);
    	parms.put("P_COLUMN", 				column);
		parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_EXPENSES.getCostExpensesFilter", parms);
        return record;
	}


}