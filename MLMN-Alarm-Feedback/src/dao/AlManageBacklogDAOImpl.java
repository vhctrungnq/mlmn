package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.AlManageBacklog;

public class AlManageBacklogDAOImpl extends SqlMapClientDaoSupport implements AlManageBacklogDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public AlManageBacklogDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        AlManageBacklog key = new AlManageBacklog();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("AL_MANAGE_BACKLOG.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public void insert(AlManageBacklog record) {
        getSqlMapClientTemplate().insert("AL_MANAGE_BACKLOG.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public void insertSelective(AlManageBacklog record) {
        getSqlMapClientTemplate().insert("AL_MANAGE_BACKLOG.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public AlManageBacklog selectByPrimaryKey(Integer id) {
        AlManageBacklog key = new AlManageBacklog();
        key.setId(id);
        AlManageBacklog record = (AlManageBacklog) getSqlMapClientTemplate().queryForObject("AL_MANAGE_BACKLOG.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public int updateByPrimaryKeySelective(AlManageBacklog record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_BACKLOG.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_BACKLOG
     *
     * @ibatorgenerated Sun Dec 15 21:58:47 ICT 2013
     */
    public int updateByPrimaryKey(AlManageBacklog record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_BACKLOG.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    public int updateByUniqueKey(AlManageBacklog record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_BACKLOG.ibatorgenerated_updateByUniqueKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<AlManageBacklog> getAlManageBacklogFilter(String work, String team, String teamOfUser,
			Integer startRecord, Integer endRecord, String sortfield, String sortorder, String strWhere) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_WORK", work);
    	map.put("P_TEAM", team);
    	map.put("P_TEAM_OF_USER", teamOfUser);
    	map.put("P_START_RECORD", startRecord);
    	map.put("P_END_RECORD", endRecord);
    	map.put("P_SOFT_FIELD", sortfield);
    	map.put("P_SOFT_ORDER", sortorder);
    	map.put("P_STR_WHERE", strWhere);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_MANAGE_BACKLOG.getAlManageBacklogFilter", map);
    }
    
    @Override
    public int countAlManageBacklogFilter(String work, String team, String teamOfUser, String strWhere){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_WORK", work);
    	map.put("P_TEAM", team);
    	map.put("P_TEAM_OF_USER", teamOfUser);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("AL_MANAGE_BACKLOG.countAlManageBacklogFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<AlManageBacklog> checkWorkBacklogUk(String work, String id) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_WORK", work);
    	map.put("P_ID", id);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_MANAGE_BACKLOG.checkWorkBacklogUk", map);
    }
}