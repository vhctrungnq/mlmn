package vn.com.vhc.vmsc2.statistics.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vn.com.vhc.vmsc2.statistics.domain.Cell;

public class CellDAOImpl extends SqlMapClientDaoSupport implements CellDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public CellDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public int deleteByPrimaryKey(String bscid, String cellid) {
        Cell key = new Cell();
        key.setBscid(bscid);
        key.setCellid(cellid);
        int rows = getSqlMapClientTemplate().delete("H_CELL.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public void insert(Cell record) {
        getSqlMapClientTemplate().insert("H_CELL.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public void insertSelective(Cell record) {
        getSqlMapClientTemplate().insert("H_CELL.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public Cell selectByPrimaryKey(String bscid, String cellid) {
        Cell key = new Cell();
        key.setBscid(bscid);
        key.setCellid(cellid);
        Cell record = (Cell) getSqlMapClientTemplate().queryForObject("H_CELL.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public int updateByPrimaryKeySelective(Cell record) {
        int rows = getSqlMapClientTemplate().update("H_CELL.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table H_CELL
     *
     * @ibatorgenerated Thu Mar 31 10:27:15 ICT 2016
     */
    public int updateByPrimaryKey(Cell record) {
        int rows = getSqlMapClientTemplate().update("H_CELL.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    public int updateById(Cell record) {
        int rows = getSqlMapClientTemplate().update("H_CELL.ibatorgenerated_updateById", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	public List<String> getCellids(String term) {
		return getSqlMapClientTemplate().queryForList("H_CELL.getCell", term);
	}

	@SuppressWarnings("unchecked")
	public List<String> getSiteids(String term) {
		return getSqlMapClientTemplate().queryForList("H_CELL.getSite", term);
	}

	@SuppressWarnings("unchecked")
	public List<Cell> getAllBsc() {
		return getSqlMapClientTemplate().queryForList("H_CELL.getAllBsc");
	}

	@SuppressWarnings("unchecked")
	public List<String> getAllCellOfBsc(String bscid) {
		return getSqlMapClientTemplate().queryForList("H_CELL.getAllCellOfBsc", bscid);
	}

	@SuppressWarnings("unchecked")
	public List<Cell> getCellOfBsc(String bscid) {
		return getSqlMapClientTemplate().queryForList("H_CELL.getCellOfBsc", bscid);
	}

	@SuppressWarnings("unchecked")
	public List<String> getSiteOfBsc(String bscid) {
		return getSqlMapClientTemplate().queryForList("H_CELL.getSiteOfBsc", bscid);
	}
	
	@SuppressWarnings("unchecked")
	public List<Cell> getHCellFilter(String bscid, String siteid, String cellid, String vendor, String province, String district,
			Integer startRecord, Integer endRecord, String column, String order) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_BSCID", bscid);
    	map.put("P_SITEID", siteid);
    	map.put("P_CELLID", cellid);
    	map.put("P_VENDOR", vendor);
    	map.put("P_PROVINCE", province);
    	map.put("P_DISTRICT", district);
    	map.put("P_START_RECORD", startRecord);
    	map.put("P_END_RECORD", endRecord);
    	map.put("P_COLUMN", column);
    	map.put("P_ORDER", order);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("H_CELL.getHCellFilter", map);
    }
	
    public int countHCellFilter(String bscid, String siteid, String cellid, String vendor, String province, String district){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_BSCID", bscid);
    	map.put("P_SITEID", siteid);
    	map.put("P_CELLID", cellid);
    	map.put("P_VENDOR", vendor);
    	map.put("P_PROVINCE", province);
    	map.put("P_DISTRICT", district);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("H_CELL.countHCellFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
    
    @SuppressWarnings("unchecked")
    public List<Cell> checkPrimaryKeyBscCell(String bscid, String cellid, String id) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_BSCID", bscid);
    	map.put("P_CELLID", cellid);
    	map.put("P_ID", id);
    	map.put("P_DATA", null); 
        return getSqlMapClientTemplate().queryForList("H_CELL.checkPrimaryKeyBscCell", map);
    }

	@SuppressWarnings("unchecked")
	public List<Cell> selectBySiteOrCell(String site) {
		Cell key = new Cell();
		key.setSiteid(site);
		key.setCellid(site);
		return getSqlMapClientTemplate().queryForList("H_CELL.selectBySiteOrCell", key);
	}
	
	public int deleteById(Integer id) {
        Cell key = new Cell();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("H_CELL.ibatorgenerated_deleteById", key);
        return rows;
    }
	
	public Cell selectById(String id) {
        Cell key = new Cell();
        key.setId(Integer.parseInt(id));
        Cell record = (Cell) getSqlMapClientTemplate().queryForObject("H_CELL.ibatorgenerated_selectById", key);
        return record;
    }
	
	
    public Cell getSiteInfoFilter(String siteid){
    	
    	Map<String, String> parms = new HashMap<String, String>();
    	parms.put("P_SITEID", siteid);
		parms.put("P_DATA", null);
    	return (Cell) getSqlMapClientTemplate().queryForObject("H_CELL.getSiteInfoFilter", parms);
    }
}