package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.CostPlan;
import vo.SYS_PARAMETER;

public class CostPlanDAOImpl extends SqlMapClientDaoSupport implements CostPlanDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public CostPlanDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CostPlan key = new CostPlan();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("COST_PLAN.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public void insert(CostPlan record) {
        getSqlMapClientTemplate().insert("COST_PLAN.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public void insertSelective(CostPlan record) {
        getSqlMapClientTemplate().insert("COST_PLAN.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public CostPlan selectByPrimaryKey(Integer id) {
        CostPlan key = new CostPlan();
        key.setId(id);
        CostPlan record = (CostPlan) getSqlMapClientTemplate().queryForObject("COST_PLAN.selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public int updateByPrimaryKeySelective(CostPlan record) {
        int rows = getSqlMapClientTemplate().update("COST_PLAN.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_PLAN
     *
     * @ibatorgenerated Wed Jun 12 09:10:36 ICT 2013
     */
    public int updateByPrimaryKey(CostPlan record) {
        int rows = getSqlMapClientTemplate().update("COST_PLAN.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleForm(String typeForm) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_TYPE_FORM", typeForm); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("COST_PLAN.titleForm", map);
	
	}

	@Override
	public CostPlan checkExit(String departmentId, Integer costYear,
			String expensesSupper, String expensesCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DEPARTMENT_ID", 		departmentId);
    	parms.put("P_COST_YEAR", 			costYear);
    	parms.put("P_EXPENSES_SUPPER", 		expensesSupper);
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
    	
		parms.put("P_DATA", 				null);
		@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.checkExit", parms);
        if (record.size()>0)
        	return record.get(0);
		return null;
	}

	@Override
	public List<CostPlan> getCostPlanFilter(CostPlan costPlan, String column,
			int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DEPARTMENT_ID", 		costPlan.getDepartmentId());
    	parms.put("P_COST_YEAR", 			costPlan.getCostYear());
    	parms.put("P_EXPENSES_SUPER", 		costPlan.getExpensesSupper());
    	parms.put("P_EXPENSES_NAME", 		costPlan.getExpensesName());
    	parms.put("P_ORDER", 				order);
    	parms.put("P_COLUMN", 				column);
		parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.getCostPlanFilter", parms);
        return record;
	}

	@Override
	public int updateCostSupper(String expensesSupper, String expensesSuperOld,String departmentId, Integer costYear) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_EXPENSES_SUPER", expensesSupper);
		parms.put("P_EXPENSES_SUPER_OLD", expensesSuperOld);
		parms.put("P_DEPARTMENT_ID", 		departmentId);
    	parms.put("P_COST_YEAR", 			costYear);
        int rows = getSqlMapClientTemplate().update("COST_PLAN.updateCostSupper", parms);
        return rows;
	}

	@Override
	public List<CostPlan> getPlanSameList(String departmentId,
			Integer costYear, String expensesCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DEPARTMENT_ID", 		departmentId);
    	parms.put("P_COST_YEAR", 			costYear);
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
		parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.getPlanSameList", parms);
        return record;
	}

	

	@Override
	public int deleteCostPlan(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", 				  id);
    	int rows = getSqlMapClientTemplate().delete("COST_PLAN.deleteCostPlan", parms);
        return rows;
	}

	@Override
	public List<CostPlan> getCostPlanByMonth(String departmentId,
			Integer costYear, Integer costMonth) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DEPARTMENT_ID", 		departmentId);
    	parms.put("P_COST_YEAR", 			costYear);
    	parms.put("P_COST_MONTH", 			costMonth);
    	parms.put("P_DATA", 				null);
    	
		@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.getCostPlanByMonth", parms);
        return record;
	}

	@Override
	public CostPlan selectById(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_ID", 		id);
    	parms.put("P_DATA", 	null);
    	@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.selectById", parms);
        if (record.size()>0)
        	return record.get(0);
		return null;
	}

	@Override
	public CostPlan getPlanByCode_Year_Department(String expenCode,
			String departmentId, Integer costYear) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DEPARTMENT_ID", 		departmentId);
    	parms.put("P_COST_YEAR", 			costYear);
    	parms.put("P_EXPENSES_CODE", 		expenCode);
    	parms.put("P_DATA", 	null);
    	@SuppressWarnings("unchecked")
		List<CostPlan> record = getSqlMapClientTemplate().queryForList("COST_PLAN.getPlanByCode_Year_Department", parms);
        if (record.size()>0)
        	return record.get(0);
		return null;
	}

}