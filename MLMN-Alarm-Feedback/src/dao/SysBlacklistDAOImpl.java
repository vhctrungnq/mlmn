package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.SysBlacklist;

public class SysBlacklistDAOImpl extends SqlMapClientDaoSupport implements SysBlacklistDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public SysBlacklistDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public int deleteByPrimaryKey(String alarmId, String smsEmail, String username) {
        SysBlacklist key = new SysBlacklist();
        key.setAlarmId(alarmId);
        key.setSmsEmail(smsEmail);
        key.setUsername(username);
        int rows = getSqlMapClientTemplate().delete("SYS_BLACKLIST.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public void insert(SysBlacklist record) {
        getSqlMapClientTemplate().insert("SYS_BLACKLIST.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public void insertSelective(SysBlacklist record) {
        getSqlMapClientTemplate().insert("SYS_BLACKLIST.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public SysBlacklist selectByPrimaryKey(String alarmId, String smsEmail, String username) {
        SysBlacklist key = new SysBlacklist();
        key.setAlarmId(alarmId);
        key.setSmsEmail(smsEmail);
        key.setUsername(username);
        SysBlacklist record = (SysBlacklist) getSqlMapClientTemplate().queryForObject("SYS_BLACKLIST.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public int updateByPrimaryKeySelective(SysBlacklist record) {
        int rows = getSqlMapClientTemplate().update("SYS_BLACKLIST.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_BLACKLIST
     *
     * @ibatorgenerated Sat Oct 19 00:03:33 ICT 2013
     */
    public int updateByPrimaryKey(SysBlacklist record) {
        int rows = getSqlMapClientTemplate().update("SYS_BLACKLIST.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<SysBlacklist> getSysBlacklistByUsername(String username, String alarmType, String alarmId, String alarmName) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("S_ALARM_TYPE", alarmType);
		parms.put("S_ALARM_ID", alarmId);
		parms.put("S_ALARM_NAME", alarmName);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("SYS_BLACKLIST.getSysBlacklistByUsername", parms);
	}
    
    @Override
	public int insertSysBlacklistByUser(String username, String checkedlist) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_CHECKEDLIST", checkedlist);	
		getSqlMapClientTemplate().queryForObject("SYS_BLACKLIST.insertSysBlacklistByUser", parms);
		return 1;
	}
    
    @Override
   	public int deleteSysBlacklist(String checkedlist) {
   		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_CHECKEDLIST", checkedlist);	
   		getSqlMapClientTemplate().queryForObject("SYS_BLACKLIST.deleteSysBlacklist", parms);
   		return 1;
   	}
    
    @Override
   	public int updateSysBlackList(String id, String isEnable, String smsEmail) {
   		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_ID", id);
   		parms.put("P_IS_ENABLE", isEnable);
   		parms.put("P_SMS_EMAIL", smsEmail);
   		getSqlMapClientTemplate().queryForObject("SYS_BLACKLIST.updateSysBlackList", parms);
   		return 1;
   	}
    
    @Override
	public int insertBlacklistByParameter(String username, String checkedlist) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_CHECKEDLIST", checkedlist);	
		getSqlMapClientTemplate().queryForObject("SYS_BLACKLIST.insertBlacklistByParameter", parms);
		return 1;
	}
}