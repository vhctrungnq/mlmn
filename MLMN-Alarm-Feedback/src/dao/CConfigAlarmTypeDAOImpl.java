package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.CConfigAlarmType;

public class CConfigAlarmTypeDAOImpl extends SqlMapClientDaoSupport implements CConfigAlarmTypeDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public CConfigAlarmTypeDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CConfigAlarmType key = new CConfigAlarmType();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("C_CONFIG_ALARM_TYPE.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public void insert(CConfigAlarmType record) {
        getSqlMapClientTemplate().insert("C_CONFIG_ALARM_TYPE.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public void insertSelective(CConfigAlarmType record) {
        getSqlMapClientTemplate().insert("C_CONFIG_ALARM_TYPE.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public CConfigAlarmType selectByPrimaryKey(Integer id) {
        CConfigAlarmType key = new CConfigAlarmType();
        key.setId(id);
        CConfigAlarmType record = (CConfigAlarmType) getSqlMapClientTemplate().queryForObject("C_CONFIG_ALARM_TYPE.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public int updateByPrimaryKeySelective(CConfigAlarmType record) {
        int rows = getSqlMapClientTemplate().update("C_CONFIG_ALARM_TYPE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_CONFIG_ALARM_TYPE
     *
     * @ibatorgenerated Thu Oct 24 15:33:35 PDT 2013
     */
    public int updateByPrimaryKey(CConfigAlarmType record) {
        int rows = getSqlMapClientTemplate().update("C_CONFIG_ALARM_TYPE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    @Override
    public int updateByUniqueKey(CConfigAlarmType record) {
        int rows = getSqlMapClientTemplate().update("C_CONFIG_ALARM_TYPE.ibatorgenerated_updateByUniqueKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmName(String vendor, String alarmType,String network) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_VENDOR", vendor);
		parms.put("P_ALARM_TYPE", alarmType);
		parms.put("P_NETWORK", network);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmName", parms);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmMappingName(String vendor,
			String alarmType,String network) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_VENDOR", vendor);
		parms.put("P_ALARM_TYPE", alarmType);
		parms.put("P_NETWORK", network);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmMappingName", parms);
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmTypeByUser(String username, String alarmType, String alarmId, String alarmName) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("S_ALARM_TYPE", alarmType);
		parms.put("S_ALARM_ID", alarmId);
		parms.put("S_ALARM_NAME", alarmName);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmTypeByUser", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getCConfigAlarmTypeFilter(
			String vendor, 
			String node, 
			String neType,
			String blockValue,
			String alarmMappingName,
			String alarmMappingId,
			Integer startRecord, 
			Integer endRecord, 
			String sortfield, 
			String sortorder, 
			String strWhere) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_VENDOR", vendor);
		parms.put("P_NODE", node);
		parms.put("P_NE_TYPE", neType);
		parms.put("P_BLOCK_VALUE", blockValue);
		parms.put("P_ALARM_MAPPING_NAME", alarmMappingName);
		parms.put("P_ALARM_MAPPING_ID", alarmMappingId);
		parms.put("P_START_RECORD", startRecord);
		parms.put("P_END_RECORD", endRecord);
		parms.put("P_SOFT_FIELD", sortfield);
		parms.put("P_SOFT_ORDER", sortorder);
		parms.put("P_STR_WHERE", strWhere);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getCConfigAlarmTypeFilter", parms);
	}
	
	@Override
    public int countCConfigAlarmType(
    		String vendor, 
			String node, 
			String neType,
			String blockValue,
			String alarmMappingName,
			String alarmMappingId,
			String strWhere){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_VENDOR", vendor);
    	map.put("P_NODE", node);
    	map.put("P_NE_TYPE", neType);
    	map.put("P_BLOCK_VALUE", blockValue);
    	map.put("P_ALARM_MAPPING_NAME", alarmMappingName);
    	map.put("P_ALARM_MAPPING_ID", alarmMappingId);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("C_CONFIG_ALARM_TYPE.countCConfigAlarmType", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getCheckUniqueAlarmType(
			String vendor, 
			String node, 
			String neType, 
			String rawTable,
			String alarmColumnName,
			String alarmValue,
			String id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_VENDOR", vendor);
		parms.put("P_NODE", node);
		parms.put("P_NE_TYPE", neType);
		parms.put("P_RAW_TABLE", rawTable);
		parms.put("P_BLOCK_COLUMN_NAME", alarmColumnName);
		parms.put("P_BLOCK_VALUE", alarmValue);
		parms.put("P_ID", id);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getCheckUniqueAlarmType", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmMappingNameList() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmMappingNameList", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmMappingIdList() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmMappingIdList", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getDistinctAlarmTypeList() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getDistinctAlarmTypeList", parms);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CConfigAlarmType> getAlarmType(String network, String statusView) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_NETWORK", network);
		parms.put("P_STATUS_VIEW", statusView);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("C_CONFIG_ALARM_TYPE.getAlarmType", parms);
	}
}