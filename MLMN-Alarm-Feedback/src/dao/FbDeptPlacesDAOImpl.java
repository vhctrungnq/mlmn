package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.FbDeptPlaces;

public class FbDeptPlacesDAOImpl extends SqlMapClientDaoSupport implements FbDeptPlacesDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public FbDeptPlacesDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public int deleteByPrimaryKey(Integer id) {
        FbDeptPlaces key = new FbDeptPlaces();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("FB_DEPT_PLACES.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public void insert(FbDeptPlaces record) {
        getSqlMapClientTemplate().insert("FB_DEPT_PLACES.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public void insertSelective(FbDeptPlaces record) {
        getSqlMapClientTemplate().insert("FB_DEPT_PLACES.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public FbDeptPlaces selectByPrimaryKey(Integer id) {
        FbDeptPlaces key = new FbDeptPlaces();
        key.setId(id);
        FbDeptPlaces record = (FbDeptPlaces) getSqlMapClientTemplate().queryForObject("FB_DEPT_PLACES.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public int updateByPrimaryKeySelective(FbDeptPlaces record) {
        int rows = getSqlMapClientTemplate().update("FB_DEPT_PLACES.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table FB_DEPT_PLACES
     *
     * @ibatorgenerated Tue Oct 30 09:27:22 ICT 2012
     */
    public int updateByPrimaryKey(FbDeptPlaces record) {
        int rows = getSqlMapClientTemplate().update("FB_DEPT_PLACES.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	public List<FbDeptPlaces> Filter(String deptCode, String provinceCode, String placesCode, String column, String order) {
    	Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DEPT_CODE", deptCode);
		map.put("P_PROVINCE_CODE", provinceCode);
		map.put("P_PLACES_CODE", placesCode);
		map.put("P_COLUMN", column);
		map.put("P_ORDER", order);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("FB_DEPT_PLACES.filter", map);
	}
    
    @SuppressWarnings("unchecked")
    @Override
	public List<FbDeptPlaces> getToXuLyList() {
    	Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("FB_DEPT_PLACES.getToXuLyList", map);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<String> selectAreaAll() {
		return getSqlMapClientTemplate().queryForList("FB_DEPT_PLACES.selectAreaAll");
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public List<FbDeptPlaces> checkKhuVuc(String phongBan, String khuVuc) {
		FbDeptPlaces key = new FbDeptPlaces();
		key.setPlacesCode(khuVuc);
		if (!phongBan.equals("1"))
		{
			key.setDeptCode(phongBan);
		}
		return getSqlMapClientTemplate().queryForList("FB_DEPT_PLACES.checkKhuVuc", key);
	}
	
	@Override
    public int countDepartmentAndPlaces(String deptCode, String provinceCode, String placesCode, String id){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DEPT_CODE", deptCode);
    	parms.put("P_PROVINCE_CODE", provinceCode);
    	parms.put("P_PLACES_CODE", placesCode);
    	parms.put("P_ID", id);
		parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("FB_DEPT_PLACES.countDepartmentAndPlaces", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
    }
	
	@SuppressWarnings("unchecked")
	@Override
	public List<FbDeptPlaces> getAreaBydeptCode(String team) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("P_DEPT_CODE", team);
    	parms.put("P_DATA", null);
   		return getSqlMapClientTemplate().queryForList("FB_DEPT_PLACES.getAreaBydeptCode", parms);
	}

}