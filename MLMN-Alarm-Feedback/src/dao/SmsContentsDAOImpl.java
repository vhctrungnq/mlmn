package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.SYS_PARAMETER;
import vo.SmsContents;

public class SmsContentsDAOImpl extends SqlMapClientDaoSupport implements SmsContentsDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public SmsContentsDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        SmsContents key = new SmsContents();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("SMS_CONTENTS.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public void insert(SmsContents record) {
        getSqlMapClientTemplate().insert("SMS_CONTENTS.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public void insertSelective(SmsContents record) {
        getSqlMapClientTemplate().insert("SMS_CONTENTS.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public SmsContents selectByPrimaryKey(Integer id) {
        SmsContents key = new SmsContents();
        key.setId(id);
        SmsContents record = (SmsContents) getSqlMapClientTemplate().queryForObject("SMS_CONTENTS.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public int updateByPrimaryKeySelective(SmsContents record) {
        int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SMS_CONTENTS
     *
     * @ibatorgenerated Thu Oct 03 09:22:41 ICT 2013
     */
    public int updateByPrimaryKey(SmsContents record) {
        int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

	@Override
	public int sendMail(SmsContents record) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_POSITION",null);
   		parms.put("P_ISDN", record.getIsdn());
   		parms.put("P_ALARM_TYPE", record.getAlarmType());
   		parms.put("P_MESSAGE", record.getMessage());
   		parms.put("P_USERNAME", record.getUsername());
   		
       int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.sendMail", parms);
       return rows;
	}
	// Gui tin nhan
	@Override
	public int sendSms(SmsContents record) {
		Map<String, Object> parms = new HashMap<String, Object>(); 
   		parms.put("P_MESSAGE", record.getMessage());
   		parms.put("P_USERNAME", record.getUsername());
   		parms.put("P_DISTRICT", record.getDisctict());
   		parms.put("P_ISDN_TYPE", record.getIsdnType());
       int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.sendSms", parms);
       return rows;
	}
	@Override
	public int sendSmsDDh(SmsContents record) {
		Map<String, Object> parms = new HashMap<String, Object>(); 
   		parms.put("P_ISDN", record.getIsdn());
   		parms.put("P_MESSAGE", record.getMessage());
   		parms.put("P_USERNAME", record.getUsername()); 
       int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.sendSmsDDh", parms);
       return rows;
	}
	// lay danh sach tieu de chuc nang 
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleForm(String function, String typeForm) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_FUNTION", function);	
		parms.put("P_FORM", typeForm);	
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("SMS_CONTENTS.titleForm", parms);
	}
	// lay danh sach sms total
	@SuppressWarnings("unchecked")
	@Override
	public List<SmsContents> getSMSContentTotal(String sdate, String edate) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_SDATE", sdate);	
		parms.put("P_EDATE", edate);	
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("SMS_CONTENTS.getSMSContentTotal", parms);
	}
	// lay danh sach sms detail
	@SuppressWarnings("unchecked")
	@Override
	public List<SmsContents> getSMSContentDetail(String sdate, String edate,String username, String isdn, String alarmType) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_SDATE", sdate);	
		parms.put("P_EDATE", edate);
		parms.put("P_USERNAME", username);
		parms.put("P_ISDN", isdn);
		parms.put("P_ALARM_TYPE", alarmType);
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("SMS_CONTENTS.getSMSContentDetail", parms);
	}

	@Override
	public int checkIsdn(String isdn) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_ISDN", isdn);
   		parms.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("SMS_CONTENTS.checkIsdn", parms);
      	Integer record = (Integer) parms.get("P_DATA");
      	return record;
	}
/* send sms form group or phone*/
	/*@Override
	public int sendSMS(SmsContents record) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_POSITION",null);
   		parms.put("P_ISDN", record.getIsdn());
   		parms.put("P_ALARM_TYPE", record.getAlarmType());
   		parms.put("P_MESSAGE", record.getMessage());
   		parms.put("P_USERNAME", record.getUsername());
   		
       int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.sendSMS", parms);
       return rows;
	}*/
	// gui sms den dai VT, toVT.AnhCTV"13/03/2018
	@Override
	public int sendSmsFBDVT(String idFBChecked, String mess, String username,
			String district, String isFeedbackedStr, String ccEmail) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID_FB_LIST", idFBChecked);	
		parms.put("P_MESSAGE", mess);	
		parms.put("P_USERNAME", username);	
		parms.put("P_DISTRICT", district);	
		parms.put("P_ISDN_TYPE", isFeedbackedStr);	
		parms.put("P_EMAIL_LIST", ccEmail);	
		int rows = getSqlMapClientTemplate().update("SMS_CONTENTS.sendSmsFBDVT", parms);
       return rows;
	}
}