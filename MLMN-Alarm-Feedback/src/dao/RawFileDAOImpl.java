package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.RawFile;
import vo.SYS_PARAMETER;

public class RawFileDAOImpl extends SqlMapClientDaoSupport implements RawFileDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public RawFileDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public int deleteByPrimaryKey(Long fileId) {
        RawFile key = new RawFile();
        key.setFileId(fileId);
        int rows = getSqlMapClientTemplate().delete("C_RAW_FILES.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public void insert(RawFile record) {
        getSqlMapClientTemplate().insert("C_RAW_FILES.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public void insertSelective(RawFile record) {
        getSqlMapClientTemplate().insert("C_RAW_FILES.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public RawFile selectByPrimaryKey(Long fileId) {
        RawFile key = new RawFile();
        key.setFileId(fileId);
        RawFile record = (RawFile) getSqlMapClientTemplate().queryForObject("C_RAW_FILES.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public int updateByPrimaryKeySelective(RawFile record) {
        int rows = getSqlMapClientTemplate().update("C_RAW_FILES.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table C_RAW_FILES
     *
     * @ibatorgenerated Fri Sep 10 17:39:52 ICT 2010
     */
    public int updateByPrimaryKey(RawFile record) {
        int rows = getSqlMapClientTemplate().update("C_RAW_FILES.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    @SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleRawFile(String typeForm) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_TYPE_FORM", typeForm);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_RAW_FILES.titleRawFile", map);
	
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<RawFile> filter(String startDate, String endDate,
			String convertFlag, String rawTable, String fileName,
			String nodeName, String importFlag, int startRecord, int endRecord,
			String column, int order) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_START_DATE", startDate);
		map.put("P_END_DATE", endDate);
		map.put("P_CONVERT_FLAG", convertFlag);
		map.put("P_RAW_TABLE", rawTable);
		map.put("P_FILE_NAME", fileName);
		map.put("P_NODE_NAME", nodeName);
		map.put("P_IMPORT_FLAG", importFlag);
		map.put("P_START_RECORD", startRecord);
		map.put("P_END_RECORD", endRecord);
		map.put("P_COLUMN", column);
		map.put("P_ORDER", order);
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_RAW_FILES.filter", map);
	}
	
	@Override
	public Integer countRow(String startDate, String endDate,
			String convertFlag, String rawTable, String fileName,
			String nodeName, String importFlag) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_START_DATE", startDate);
		map.put("P_END_DATE", endDate);
		map.put("P_CONVERT_FLAG", convertFlag);
		map.put("P_RAW_TABLE", rawTable);
		map.put("P_FILE_NAME", fileName);
		map.put("P_NODE_NAME", nodeName);
		map.put("P_IMPORT_FLAG", importFlag);
		map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("C_RAW_FILES.countRow", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> getConvertFlagList() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_RAW_FILES.getConvertFlagList", map);
	
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> getImportFlagList() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("C_RAW_FILES.getImportFlagList", map);
	
	}
}