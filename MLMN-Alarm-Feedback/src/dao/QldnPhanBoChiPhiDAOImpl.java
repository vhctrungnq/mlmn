package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.AlMonitorSite;
import vo.QldnPhanBoChiPhi;

public class QldnPhanBoChiPhiDAOImpl extends SqlMapClientDaoSupport implements QldnPhanBoChiPhiDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public QldnPhanBoChiPhiDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public int deleteByPrimaryKey(Integer id) {
        QldnPhanBoChiPhi key = new QldnPhanBoChiPhi();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public void insert(QldnPhanBoChiPhi record) {
        getSqlMapClientTemplate().insert("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public void insertSelective(QldnPhanBoChiPhi record) {
        getSqlMapClientTemplate().insert("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public QldnPhanBoChiPhi selectByPrimaryKey(Integer id) {
        QldnPhanBoChiPhi key = new QldnPhanBoChiPhi();
        key.setId(id);
        QldnPhanBoChiPhi record = (QldnPhanBoChiPhi) getSqlMapClientTemplate().queryForObject("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public int updateByPrimaryKeySelective(QldnPhanBoChiPhi record) {
        int rows = getSqlMapClientTemplate().update("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table QLDN_PHAN_BO_CHI_PHI
     *
     * @ibatorgenerated Mon Jul 03 14:27:56 ICT 2017
     */
    public int updateByPrimaryKey(QldnPhanBoChiPhi record) {
        int rows = getSqlMapClientTemplate().update("QLDN_PHAN_BO_CHI_PHI.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    // kiem tra tinh thanh pho trong nam da duoc phan bo chi phi chua
    
	@Override
	public QldnPhanBoChiPhi checkPhanBoChiPhi(Integer year, String loaiChiPhi,
			String tinh) {
		 QldnPhanBoChiPhi key = new QldnPhanBoChiPhi();
	        key.setYear(year);
	        key.setLoaiChiPhi(loaiChiPhi);
	        key.setTinh(tinh);
	        QldnPhanBoChiPhi record = (QldnPhanBoChiPhi) getSqlMapClientTemplate().queryForObject("QLDN_PHAN_BO_CHI_PHI.checkPhanBoChiPhi", key);
	        return record;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<QldnPhanBoChiPhi> getPhanBoChiPhiListAll(Integer year, String tinh,String loaiChiPhi) {
		Map<String, Object> parms = new HashMap<String, Object>();
			
		parms.put("P_YEAR", year);	
		parms.put("P_TINH", tinh);
		parms.put("P_LOAI_CHI_PHI", loaiChiPhi);	
		parms.put("P_DATA", null);
			
		return getSqlMapClientTemplate().queryForList("QLDN_PHAN_BO_CHI_PHI.getPhanBoChiPhiListAll", parms);
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<QldnPhanBoChiPhi> getChiPhiKeHoachListAll(String syear,String eyear) {
		Map<String, Object> parms = new HashMap<String, Object>();
			
		parms.put("P_SYEAR", syear);	
		parms.put("P_EYEAR", eyear);	
			
		parms.put("P_DATA", null);
			
		return getSqlMapClientTemplate().queryForList("QLDN_PHAN_BO_CHI_PHI.getChiPhiKeHoachListAll", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<QldnPhanBoChiPhi> getTHChiPhiTinhListAll(String smonth,String emonth, String tinh) {
		Map<String, Object> parms = new HashMap<String, Object>();
			
		parms.put("P_SMONTH", smonth);	
		parms.put("P_EMONTH", emonth);	
		parms.put("P_TINH", tinh);	
		parms.put("P_DATA", null);
			
		return getSqlMapClientTemplate().queryForList("QLDN_PHAN_BO_CHI_PHI.getTHChiPhiTinhListAll", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<QldnPhanBoChiPhi> getTHChiPhiTramListAll(String smonth,String emonth, String tram, String nhom, String tinh) {
		Map<String, Object> parms = new HashMap<String, Object>();
			
		parms.put("P_SMONTH", smonth);	
		parms.put("P_EMONTH", emonth);	
		parms.put("P_TRAM", tram);
		parms.put("P_NHOM", nhom);
		parms.put("P_TINH", tinh);	
		parms.put("P_DATA", null);
			
		return getSqlMapClientTemplate().queryForList("QLDN_PHAN_BO_CHI_PHI.getTHChiPhiTramListAll", parms);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<QldnPhanBoChiPhi> getTinhHinhChiPhiNamListAll(Integer year, String tinh) {
		Map<String, Object> parms = new HashMap<String, Object>();
			
		parms.put("P_YEAR", year);	
		parms.put("P_TINH", tinh);	
		parms.put("P_DATA", null);
			
		return getSqlMapClientTemplate().queryForList("QLDN_PHAN_BO_CHI_PHI.getTinhHinhChiPhiNamListAll", parms);
	}
}