package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.CableType;

public class CableTypeDAOImpl extends SqlMapClientDaoSupport implements CableTypeDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public CableTypeDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public int deleteByPrimaryKey(String cableTypeId) {
        CableType key = new CableType();
        key.setCableTypeId(cableTypeId);
        int rows = getSqlMapClientTemplate().delete("CABLE_TYPE.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public void insert(CableType record) {
        getSqlMapClientTemplate().insert("CABLE_TYPE.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public void insertSelective(CableType record) {
        getSqlMapClientTemplate().insert("CABLE_TYPE.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public CableType selectByPrimaryKey(String cableTypeId) {
        CableType key = new CableType();
        key.setCableTypeId(cableTypeId);
        CableType record = (CableType) getSqlMapClientTemplate().queryForObject("CABLE_TYPE.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public int updateByPrimaryKeySelective(CableType record) {
        int rows = getSqlMapClientTemplate().update("CABLE_TYPE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CABLE_TYPE
     *
     * @ibatorgenerated Wed Dec 12 17:07:59 ICT 2012
     */
    public int updateByPrimaryKey(CableType record) {
        int rows = getSqlMapClientTemplate().update("CABLE_TYPE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

	@Override
	public List<CableType> getAll() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	
		@SuppressWarnings("unchecked")
		List<CableType> record = getSqlMapClientTemplate().queryForList("CABLE_TYPE.getAll", parms);
        return record;
	}

	@Override
	public List<CableType> getCableTypeFilter(CableType cableType, int order, String column) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("cableTypeId", cableType.getCableTypeId());
		parms.put("cableTypeName", cableType.getCableTypeName());
		parms.put("description", cableType.getDescription());
		parms.put("order", order);
    	parms.put("column", column);
		
		parms.put("P_DATA", null);
    	
		@SuppressWarnings("unchecked")
		List<CableType> record = getSqlMapClientTemplate().queryForList("CABLE_TYPE.getCableTypeFilter", parms);
        return record;
	}

	@Override
	public CableType getCableTypeById(Integer id) {
		CableType key = new CableType();
        key.setId(id);
        CableType record = (CableType) getSqlMapClientTemplate().queryForObject("CABLE_TYPE.getCableTypeById", key);
        return record;
	}

	@Override
	public Integer checkUsingCableType(String cableTypeId) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("cableTypeId", cableTypeId);
		parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("CABLE_TYPE.checkUsingCableType", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}
}