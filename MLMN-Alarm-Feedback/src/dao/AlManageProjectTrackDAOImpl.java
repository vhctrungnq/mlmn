package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.AlManageProjectTrack;

public class AlManageProjectTrackDAOImpl extends SqlMapClientDaoSupport implements AlManageProjectTrackDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public AlManageProjectTrackDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        AlManageProjectTrack key = new AlManageProjectTrack();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public void insert(AlManageProjectTrack record) {
        getSqlMapClientTemplate().insert("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public void insertSelective(AlManageProjectTrack record) {
        getSqlMapClientTemplate().insert("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public AlManageProjectTrack selectByPrimaryKey(Integer id) {
        AlManageProjectTrack key = new AlManageProjectTrack();
        key.setId(id);
        AlManageProjectTrack record = (AlManageProjectTrack) getSqlMapClientTemplate().queryForObject("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public int updateByPrimaryKeySelective(AlManageProjectTrack record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MANAGE_PROJECT_TRACK
     *
     * @ibatorgenerated Tue Dec 17 16:09:38 ICT 2013
     */
    public int updateByPrimaryKey(AlManageProjectTrack record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<AlManageProjectTrack> getAlManageTrackFilter(String type, String projectCode, String siteName, String node,
			Integer startRecord, Integer endRecord, String sortfield, String sortorder, String strWhere,String region) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_TYPE", type);
    	map.put("P_PROJECT_CODE", projectCode);
    	map.put("P_SITE_NAME", siteName);
    	map.put("P_NODE", node);
    	map.put("P_START_RECORD", startRecord);
    	map.put("P_END_RECORD", endRecord);
    	map.put("P_SOFT_FIELD", sortfield);
    	map.put("P_SOFT_ORDER", sortorder);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_REGION", region);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_MANAGE_PROJECT_TRACK.getAlManageTrackFilter", map);
    }
    
    @Override
    public int countAlManageTrackFilter(String type, String projectCode, String siteName, String node, String strWhere,String region){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_TYPE", type);
    	map.put("P_PROJECT_CODE", projectCode);
    	map.put("P_SITE_NAME", siteName);
    	map.put("P_NODE", node);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_REGION", region);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("AL_MANAGE_PROJECT_TRACK.countAlManageTrackFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<AlManageProjectTrack> checkSiteNameAndNodeKey(String siteName, String node,
			String id) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_SITE_NAME", siteName);
    	map.put("P_NODE", node);
    	map.put("P_ID", id);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_MANAGE_PROJECT_TRACK.checkSiteNameAndNodeKey", map);
    }
    
    @Override
    public int updateByUniqueKey(AlManageProjectTrack record) {
        int rows = getSqlMapClientTemplate().update("AL_MANAGE_PROJECT_TRACK.ibatorgenerated_updateByUniqueKey", record);
        return rows;
    }
}