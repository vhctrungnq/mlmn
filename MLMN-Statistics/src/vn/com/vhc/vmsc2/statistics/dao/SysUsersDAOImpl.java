package vn.com.vhc.vmsc2.statistics.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vn.com.vhc.vmsc2.statistics.domain.SysParameter;
import vn.com.vhc.vmsc2.statistics.domain.SysUsers;

public class SysUsersDAOImpl extends SqlMapClientDaoSupport implements SysUsersDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public SysUsersDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int deleteByPrimaryKey(String id) {
        int rows = getSqlMapClientTemplate().delete("SYS_USERS.ibatorgenerated_deleteByPrimaryKey", id);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public void insert(SysUsers record) {
        getSqlMapClientTemplate().insert("SYS_USERS.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public void insertSelective(SysUsers record) {
        getSqlMapClientTemplate().insert("SYS_USERS.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public SysUsers selectByPrimaryKey(String username) {
        SysUsers key = new SysUsers();
        key.setUsername(username);
        SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }
    
    public SysUsers selectByID(String id) {
        SysUsers key = new SysUsers();
        key.setId(Integer.parseInt(id));
        SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectByID", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int updateByPrimaryKeySelective(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_USERS
     *
     * @ibatorgenerated Wed Oct 24 16:22:23 ICT 2012
     */
    public int updateByPrimaryKey(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
	public List<SysUsers> getUsersFilter(String maPhong, String username, String email, String phone, String isEnable, 
			String rolesAddUsers, String fullName, String groupId, String column, String order, Integer startRecord, Integer endRecord){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_USERNAME", username);
		parms.put("P_EMAIL", email);
		parms.put("P_PHONE", phone);
		parms.put("P_IS_ENABLE", isEnable);
		parms.put("P_ROLES_ADD_USERS", rolesAddUsers);
		parms.put("P_FULLNAME", fullName);
		parms.put("P_GROUP_ID", groupId);
		parms.put("P_COLUMN", column);
		parms.put("P_ORDER", order);
		parms.put("P_START_RECORD", startRecord);
		parms.put("P_END_RECORD", endRecord);
		parms.put("P_DATA", null);
		
		List<SysUsers> record = (List<SysUsers>) getSqlMapClientTemplate().queryForList("SYS_USERS.getUsersFilter", parms);
		
		return record;
	}
    
	public int countRow(String maPhong, String username, String email, String phone, String isEnable, 
			String rolesAddUsers, String fullName, String groupId){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_USERNAME", username);
		parms.put("P_EMAIL", email);
		parms.put("P_PHONE", phone);
		parms.put("P_IS_ENABLE", isEnable);
		parms.put("P_ROLES_ADD_USERS", rolesAddUsers);
		parms.put("P_FULLNAME", fullName);
		parms.put("P_GROUP_ID", groupId);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForObject("SYS_USERS.countRow", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record;
	}
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> selectSysUsers(){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.selectSysUsers", parms);
		List<SysUsers> record = (List<SysUsers>) parms.get("P_DATA");
		
		return record;
	}
	
	public int updateIsEnable(SysUsers record) {
        int rows = getSqlMapClientTemplate().update("SYS_USERS.updateIsEnable", record);
        return rows;
    }
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> getUserByMaPhong(String maPhong){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByMaPhong", parms);
		List<SysUsers> record = (List<SysUsers>)parms.get("P_DATA");
		
		return record;
	}
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> getUsersByMaPhongDontId(String maPhong, Integer id){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_MA_PHONG", maPhong);
		parms.put("P_ID", id);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForList("SYS_USERS.getUsersByMaPhongDontId", parms);
		List<SysUsers> record = (List<SysUsers>) parms.get("P_DATA");
		
		return record;
	}
	
	public int selectByUsernamePassword(String username, String password){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_PASSWORD", password);
		parms.put("P_DATA", null);
		getSqlMapClientTemplate().queryForObject("SYS_USERS.selectByUsernamePassword", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record;
	}
	
	public int updatePasswordForUsername(String username, String password) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_PASSWORD", password);
        int rows = getSqlMapClientTemplate().update("SYS_USERS.updatePasswordForUsername", parms);
        return rows;
    }
	
	@SuppressWarnings("unchecked")
	public List<SysUsers> selectAllSysUsers(){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.selectAllSysUsers", parms);
		
		return record;
	}
	
	public SysUsers selectSysUsersByUsername(String username){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
		SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectSysUsersByUsername", parms);
		return record;
		
	}

	public SysUsers selectSysUsersByfullName(String user) {
		SysUsers key = new SysUsers();
		key.setFullname(user);
		 SysUsers record = (SysUsers) getSqlMapClientTemplate().queryForObject("SYS_USERS.selectSysUsersByfullName", key);
	        return record;
	}
	
	@SuppressWarnings("unchecked")
	public List<SysParameter> titleSysUsers(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.titleSysUsers", parms);
    }
    
    @SuppressWarnings("unchecked")
	public List<SysParameter> getQuyenTaoNDList(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getQuyenTaoNDList", parms);
    }
    
    @SuppressWarnings("unchecked")
	public List<SysParameter> getTrangThaiList(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getTrangThaiList", parms);
    }
    
    @SuppressWarnings("unchecked")
	public List<SysParameter> getMucDoKhanList(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getMucDoKhanList", parms);
    }
    
    @SuppressWarnings("unchecked")
	public List<SysParameter> titleDoiMatKhau(){
    	
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.titleDoiMatKhau", parms);
    }
    
    @SuppressWarnings("unchecked")
	public List<SysUsers> selectUsersOfAlarm() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
		
		List<SysUsers> record = getSqlMapClientTemplate().queryForList("SYS_USERS.selectUsersOfAlarm", parms);
		
		return record;
	}

    @SuppressWarnings("unchecked")
	public List<SysUsers> checkUser(String userN) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", userN);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.checkUser", parms);
	}
    
    @SuppressWarnings("unchecked")
	public List<SysUsers> getUserByUsername(String username) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("SYS_USERS.getUserByUsername", parms);
	}
    
    public boolean getCountUserOfModule(String username, String system){
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_USERNAME", username);
		parms.put("P_SYSTEM", system);
		parms.put("P_DATA", null);
		
		getSqlMapClientTemplate().queryForObject("SYS_USERS.getCountUserOfModule", parms);
		Integer record = (Integer) parms.get("P_DATA");
		
		return record>=1?true:false;
	}
    
    @SuppressWarnings("unchecked")
   	@Override
   	public SysUsers selectByUsename(String username) {
   		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_USERNAME", username);
   		parms.put("P_DATA", null);
   		List<SysUsers>  recordL =  getSqlMapClientTemplate().queryForList("SYS_USERS.selectByUsename", parms);
   		SysUsers record = new SysUsers();
   		if (recordL.size()>0)
   		{
   			record = recordL.get(0);
   		}
   		return record;
   	}
}