package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.AlWorkCalendar;
import vo.AlWorkCalendarShift;
import vo.SYS_PARAMETER;
import vo.SysMailParameterMaster;

public class AlWorkCalendarDAOImpl extends SqlMapClientDaoSupport implements AlWorkCalendarDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public AlWorkCalendarDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        AlWorkCalendar key = new AlWorkCalendar();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("AL_WORK_CALENDAR.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public void insert(AlWorkCalendar record) {
        getSqlMapClientTemplate().insert("AL_WORK_CALENDAR.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public void insertSelective(AlWorkCalendar record) {
        getSqlMapClientTemplate().insert("AL_WORK_CALENDAR.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public AlWorkCalendar selectByPrimaryKey(Integer id) {
        AlWorkCalendar key = new AlWorkCalendar();
        key.setId(id);
        AlWorkCalendar record = (AlWorkCalendar) getSqlMapClientTemplate().queryForObject("AL_WORK_CALENDAR.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public int updateByPrimaryKeySelective(AlWorkCalendar record) {
        int rows = getSqlMapClientTemplate().update("AL_WORK_CALENDAR.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_WORK_CALENDAR
     *
     * @ibatorgenerated Sat Nov 30 14:28:11 ICT 2013
     */
    public int updateByPrimaryKey(AlWorkCalendar record) {
        int rows = getSqlMapClientTemplate().update("AL_WORK_CALENDAR.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    public int updateByUniqueKey(AlWorkCalendar record) {
        int rows = getSqlMapClientTemplate().update("AL_WORK_CALENDAR.ibatorgenerated_updateByUniqueKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> getAlWorkCalendarFilter(String startDate, String endDate, String shift,
			String deptCode, String email,String region,
			Integer startRecord, Integer endRecord, String sortfield, String sortorder, String strWhere) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
    	map.put("P_SHIFT", shift);
    	map.put("P_DEPT_CODE", deptCode);
    	map.put("P_EMAIL", email);
    	map.put("P_REGION", region);
    	map.put("P_START_RECORD", startRecord);
    	map.put("P_END_RECORD", endRecord);
    	map.put("P_SOFT_FIELD", sortfield);
    	map.put("P_SOFT_ORDER", sortorder);
    	map.put("P_STR_WHERE", strWhere);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getAlWorkCalendarFilter", map);
    }
    
    @Override
    public int countAlWorkCalendarFilter(String startDate, String endDate, String shift,
			String deptCode, String email,String region, String strWhere){
    	
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
    	map.put("P_SHIFT", shift);
    	map.put("P_DEPT_CODE", deptCode);
    	map.put("P_EMAIL", email);
    	map.put("P_REGION", region);
    	map.put("P_STR_WHERE", strWhere);
    	map.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("AL_WORK_CALENDAR.countAlWorkCalendarFilter", map);
    	Integer record = (Integer) map.get("P_DATA");
    	return record;
    }
    
    @SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> getCaTrucList() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getCaTrucList", parms);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> getFunctionShiftList() {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DATA", null);
    	return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getFunctionShiftList", parms);
	}
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> checkCalendarPrimaryKey(String email, String day, String shift,
			String function, String id,String region) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_EMAIL", email);
    	map.put("P_DAY", day);
    	map.put("P_SHIFT", shift);
    	map.put("P_FUNCTION", function);
    	map.put("P_ID", id);
    	map.put("P_REGION", region);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.checkCalendarPrimaryKey", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendarShift> getAlWorkCalendarShift(Integer week, Integer year, String department,
			String team, String region) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_WEEK", week);
    	map.put("P_YEAR", year);
    	map.put("P_DEPARTMENT", department);
    	map.put("P_TEAM", team);
    	map.put("P_REGION", region);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getAlWorkCalendarShift", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> getDaysOfWeek(Integer week, Integer year) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_WEEK", week);
    	map.put("P_YEAR", year);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getDaysOfWeek", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> getIdUsersList(String firstDayOfWeek) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_FIRST_DAY_OF_WEEK", firstDayOfWeek);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getIdUsersList", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> getIdUsersBeforeList(String firstDayOfWeek) {
    	Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_FIRST_DAY_OF_WEEK", firstDayOfWeek);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getIdUsersBeforeList", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<SysMailParameterMaster> getEmailDefaultForShift() {
    	Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getEmailDefaultForShift", map);
    }
	
	@SuppressWarnings("unchecked")
    @Override
	public List<AlWorkCalendar> getEmailListFromUsers() {
    	Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getEmailListFromUsers", map);
    }

	@SuppressWarnings("unchecked")
	@Override
	public List<AlWorkCalendar> getShift(String nhanNgayTruc, String nhanCatruc,String region) {
		Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_DAY", nhanNgayTruc);
    	map.put("P_SHIFT", nhanCatruc);
    	map.put("P_REGION", region);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getShift", map);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AlWorkCalendar> getStatusShiftMode(String startDate, String endDate) {
		Map<String, Object> map = new HashMap<String, Object>();
    	map.put("P_START_DATE", startDate);
    	map.put("P_END_DATE", endDate);
		map.put("P_DATA", null);
		
		return getSqlMapClientTemplate().queryForList("AL_WORK_CALENDAR.getStatusShiftMode", map);
	}
	
	@Override
    public int updateShiftMode(String startDate, String endDate, String shiftMode) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_START_DATE", startDate);
		parms.put("P_END_DATE", endDate);
		parms.put("P_SHIFT_MODE", shiftMode);
    	
        getSqlMapClientTemplate().queryForObject("AL_WORK_CALENDAR.updateShiftMode", parms);
        return 1;
    }
	
	@Override
    public int updateEmailBefore(String startDate, String endDate, String shift, String deptCode, String email, String username,String region) {
    	Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_START_DATE", startDate);
		parms.put("P_END_DATE", endDate);
		parms.put("P_SHIFT", shift);
		parms.put("P_DEPT_CODE", deptCode);
		parms.put("P_EMAIL", email);
		parms.put("P_USERNAME", username);
		parms.put("P_REGION", region);
        getSqlMapClientTemplate().queryForObject("AL_WORK_CALENDAR.updateEmailBefore", parms);
        return 1;
    }
}