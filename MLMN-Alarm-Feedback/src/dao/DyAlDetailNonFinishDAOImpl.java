package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.CountAlarmLog;
import vo.DyAlDetailNonFinish;
import vo.RAlarmLog;


public class DyAlDetailNonFinishDAOImpl extends SqlMapClientDaoSupport implements DyAlDetailNonFinishDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public DyAlDetailNonFinishDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        DyAlDetailNonFinish key = new DyAlDetailNonFinish();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public void insert(DyAlDetailNonFinish record) {
        getSqlMapClientTemplate().insert("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public void insertSelective(DyAlDetailNonFinish record) {
        getSqlMapClientTemplate().insert("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public DyAlDetailNonFinish selectByPrimaryKey(Integer id) {
        DyAlDetailNonFinish key = new DyAlDetailNonFinish();
        key.setId(id);
        DyAlDetailNonFinish record = (DyAlDetailNonFinish) getSqlMapClientTemplate().queryForObject("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public int updateByPrimaryKeySelective(DyAlDetailNonFinish record) {
        int rows = getSqlMapClientTemplate().update("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table DY_AL_DETAIL_NON_FINISH
     *
     * @ibatorgenerated Mon Dec 09 08:27:47 ICT 2013
     */
    public int updateByPrimaryKey(DyAlDetailNonFinish record) {
        int rows = getSqlMapClientTemplate().update("DY_AL_DETAIL_NON_FINISH.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
  	@Override
  	public List<CountAlarmLog> getCountForSeverity(String sdate, String edate,
  			String bscid, String cellid, String vendor, String district,
  			String alarmName, String funtion, String network, String username,
  			String province, String team, String alarmType,
  			String alarmMappingName,Integer duarationTo,
  			String bscPort,String  btsPort,String  objType,Integer quality,String region) {
  		Map<String, Object> parms = new HashMap<String, Object>();
  		parms.put("P_SDATE_FROM", sdate);
     		parms.put("P_SDATE_TO", edate);
     		parms.put("P_NE", bscid);
     		parms.put("P_CELLID", cellid);
     		parms.put("P_VENDOR", vendor);
     		parms.put("P_DISTRICT", district);
     		parms.put("P_ALARM_NAME", alarmName);
     		parms.put("P_NETWORK", network);
     		parms.put("P_TYPE_FUNTION", funtion);
     		parms.put("P_USERNAME", username);
     		parms.put("P_PROVINCE", province);
     		parms.put("P_TEAM", team);
     		parms.put("P_ALARM_TYPE", alarmType);
     		parms.put("P_ALARM_MAPPING_ID", alarmMappingName);
     		parms.put("P_DUARATION_TO", duarationTo);
     		parms.put("P_BSCPORT", bscPort);
     		parms.put("P_BTSPORT", btsPort);
     		parms.put("P_OBJ_TYPE", objType);
     		parms.put("P_QUALITY", quality);
     		parms.put("P_REGION", region);
     		parms.put("P_DATA", null);
     		return getSqlMapClientTemplate().queryForList("DY_AL_DETAIL_NON_FINISH.getCountForSeverity", parms);
  	
  	}

  	@Override
  	public int countAlarmLog(String sdate, String edate, String bscid,
  			String cellid, String vendor, String district, String alarmName,
  			String funtion, String severity, String network, String username,
  			String province, String team, String alarmType,
  			String alarmMappingName, String statusFinish, String strWhere,Integer duarationTo,
  			String bscPort,String  btsPort,String  objType,Integer quality,String region) {
  		Map<String, Object> parms = new HashMap<String, Object>();
     		parms.put("P_SDATE_FROM", sdate);
     		parms.put("P_SDATE_TO", edate);
     		parms.put("P_NE", bscid);
     		parms.put("P_CELLID", cellid);
     		parms.put("P_VENDOR", vendor);
     		parms.put("P_DISTRICT", district);
     		parms.put("P_ALARM_NAME", alarmName);
     		parms.put("P_NETWORK", network);
     		parms.put("P_SEVERITY", severity);
     		parms.put("P_TYPE_FUNTION", funtion);
     		parms.put("P_USERNAME", username);
     		parms.put("P_PROVINCE", province);
     		parms.put("P_TEAM", team);
     		parms.put("P_ALARM_TYPE", alarmType);
     		parms.put("P_ALARM_MAPPING_NAME", alarmMappingName);
     		parms.put("P_STATUS_FINISH", statusFinish);
     		parms.put("P_WHERE", strWhere);
     		parms.put("P_DUARATION_TO", duarationTo);
     		parms.put("P_BSCPORT", bscPort);
     		parms.put("P_BTSPORT", btsPort);
     		parms.put("P_OBJ_TYPE", objType);
     		parms.put("P_QUALITY", quality);
     		parms.put("P_REGION", region);
     		parms.put("P_DATA", null);
     		getSqlMapClientTemplate().queryForObject("DY_AL_DETAIL_NON_FINISH.countAlarmLog", parms);
            	Integer record = (Integer) parms.get("P_DATA");
            	return record;
  	}

  	@SuppressWarnings("unchecked")
  	@Override
  	public List<DyAlDetailNonFinish> getAlarmLog(String sdate, String edate,
  			String bscid, String cellid, String vendor, String district,
  			String alarmName, String function, String severity,
  			String strWhere, Integer startRecord, Integer endRecord,
  			String sortfield, String sortorder, String network,
  			String username, String province, String team, String alarmType,
  			String alarmMappingName, String statusFinish,Integer duarationTo,
  			String bscPort,String  btsPort,String  objType,Integer quality,String region) {
  		Map<String, Object> parms = new HashMap<String, Object>();
     		parms.put("P_SDATE_FROM", sdate);
     		parms.put("P_SDATE_TO", edate);
     		parms.put("P_NE", bscid);
     		parms.put("P_CELLID", cellid);
     		parms.put("P_VENDOR", vendor);
     		parms.put("P_DISTRICT", district);
     		parms.put("P_ALARM_NAME", alarmName);
     		parms.put("P_NETWORK", network);
     		parms.put("P_SEVERITY", severity);
     		parms.put("P_WHERE", strWhere);
     		parms.put("P_START_RECORD", startRecord);
     		parms.put("P_END_RECORD", endRecord);
     		parms.put("P_COLUMN", sortfield);
     		parms.put("P_ORDER", sortorder);
     		parms.put("P_TYPE_FUNTION",function );
     		parms.put("P_USERNAME", username);
     		parms.put("P_PROVINCE", province);
     		parms.put("P_TEAM", team);
     		parms.put("P_ALARM_TYPE", alarmType);
     		parms.put("P_ALARM_MAPPING_NAME", alarmMappingName);
     		parms.put("P_STATUS_FINISH", statusFinish);
     		parms.put("P_DUARATION_TO", duarationTo);
     		parms.put("P_BSCPORT", bscPort);
     		parms.put("P_BTSPORT", btsPort);
     		parms.put("P_OBJ_TYPE", objType);
     		parms.put("P_QUALITY", quality);
     		parms.put("P_REGION", region);
     		parms.put("P_DATA", null);
     		return getSqlMapClientTemplate().queryForList("DY_AL_DETAIL_NON_FINISH.getAlarmLog", parms);
  	
  	}

}