package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.AlMonitorSite;
import vo.SYS_PARAMETER;

public class AlMonitorSiteDAOImpl extends SqlMapClientDaoSupport implements AlMonitorSiteDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public AlMonitorSiteDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        AlMonitorSite key = new AlMonitorSite();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("AL_MONITOR_SITE.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public void insert(AlMonitorSite record) {
        getSqlMapClientTemplate().insert("AL_MONITOR_SITE.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public void insertSelective(AlMonitorSite record) {
        getSqlMapClientTemplate().insert("AL_MONITOR_SITE.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public AlMonitorSite selectByPrimaryKey(Integer id) {
        AlMonitorSite key = new AlMonitorSite();
        key.setId(id);
        AlMonitorSite record = (AlMonitorSite) getSqlMapClientTemplate().queryForObject("AL_MONITOR_SITE.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public int updateByPrimaryKeySelective(AlMonitorSite record) {
        int rows = getSqlMapClientTemplate().update("AL_MONITOR_SITE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_MONITOR_SITE
     *
     * @ibatorgenerated Fri Nov 15 10:46:49 ICT 2013
     */
    public int updateByPrimaryKey(AlMonitorSite record) {
        int rows = getSqlMapClientTemplate().update("AL_MONITOR_SITE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    /**
     * LAY TIEU DE CHO FORM
     * @param P_FUNTION: MONITORSITE, TEPERATURE SITE
     * @param P_FORM: LOAI FORM:LIST, ADD
     */
	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleForm(String funtion, String typeForm) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_FUNTION", funtion);	
		parms.put("P_FORM", typeForm);	
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("AL_MONITOR_SITE.titleForm", parms);
	}
	/**
     * LAY DANH SACH THONG TIN GIAM SAT SITE
     * @param P_SDATE: THOI GIAN BAT DAU
     *  @param P_EDATE: THOI GIAN KET THUC
     *  @param P_SITE: SITE
     *  @param P_CONTENT: NOI DUNG YEU CAU
     * @param P_DATA:
     */
	@SuppressWarnings("unchecked")
	@Override
	public List<AlMonitorSite> getMonitorSiteListAll(String sdate,
			String edate, String network, String site, String content) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_SDATE", sdate);	
		parms.put("P_EDATE", edate);	
		parms.put("P_NETWORK", network);	
		parms.put("P_SITE", site);
		parms.put("P_CONTENT", content);	
		parms.put("P_DATA", null);	
		return getSqlMapClientTemplate().queryForList("AL_MONITOR_SITE.getMonitorSiteListAll", parms);
	}
}