package dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import vo.CostDetail;
import vo.CostExpenses;
import vo.CostSum;
import vo.SYS_PARAMETER;

public class CostDetailDAOImpl extends SqlMapClientDaoSupport implements CostDetailDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public CostDetailDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public int deleteByPrimaryKey(Integer id) {
        CostDetail key = new CostDetail();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("COST_DETAIL.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public void insert(CostDetail record) {
        getSqlMapClientTemplate().insert("COST_DETAIL.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public void insertSelective(CostDetail record) {
         getSqlMapClientTemplate().insert("COST_DETAIL.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public CostDetail selectByPrimaryKey(Integer id) {
        CostDetail key = new CostDetail();
        key.setId(id);
        CostDetail record = (CostDetail) getSqlMapClientTemplate().queryForObject("COST_DETAIL.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public int updateByPrimaryKeySelective(CostDetail record) {
        int rows = getSqlMapClientTemplate().update("COST_DETAIL.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table COST_DETAIL
     *
     * @ibatorgenerated Wed May 15 15:26:21 ICT 2013
     */
    public int updateByPrimaryKey(CostDetail record) {
        int rows = getSqlMapClientTemplate().update("COST_DETAIL.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
    @SuppressWarnings("unchecked")
   	@Override
   	public List<SYS_PARAMETER> titleForm(String typeForm) {
   		Map<String, Object> map = new HashMap<String, Object>();
   		map.put("P_TYPE_FORM", typeForm); 
   		map.put("P_DATA", null);
   		return getSqlMapClientTemplate().queryForList("COST_DETAIL.titleForm", map);
   	
   	}

   	@Override
   	public List<CostDetail> getCostDetailFilter(CostDetail costDetail,
   			String column, int order) {
   		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		costDetail.getDepartmentId());
       	parms.put("P_COST_YEAR", 			costDetail.getCostYear());
       	parms.put("P_COST_MONTH", 			costDetail.getCostMonth());
       	parms.put("P_EXPENSES_SUPER", 		costDetail.getExpensesCode());
       	parms.put("P_EXPENSES_NAME", 		costDetail.getWorkName());
       	parms.put("P_ORDER", 				order);
       	parms.put("P_COLUMN",   				column);
   		parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostDetailFilter", parms);
           return record;
   	}

   	

   	@Override
   	public List<CostExpenses> getExpensesByYear(String departmentID,
   			Integer costYear) {
   		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		departmentID);
       	parms.put("P_COST_YEAR", 			costYear);
      
   		parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostExpenses> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getExpensesByYear", parms);
           return record;
   	}

	@Override
	public List<CostDetail> getWorkSuperList(Integer idsup) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_ID_SUP", 		idsup);
   		parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getWorkSuperList", parms);
           return record;
	}

	@Override
	public Integer countDetailPlan(String departmentId, Integer costMonth,
			Integer costYear,String workCode) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_WORK_CODE", 			workCode);
       	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.countDetailPlan", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}

	@Override
	public List<CostDetail> getCostDetailLastMonthNotDone(String departmentId,
			Integer costYear, Integer costMonth) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);

   		parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostDetailLastMonthNotDone", parms);
           return record;
	}

	@Override
	public CostDetail checkExits(String departmentId, Integer costYear,
			Integer costMonth, Integer workSuper,String expensesCode, String workId) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_WORK_SUPER", 			workSuper);
    	parms.put("P_WORK_ID", 				workId);
    	parms.put("P_EXPENSES_CODE", 		expensesCode);
    	
   		parms.put("P_DATA", 				null);
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.checkExits", parms);
           if (record.size()>0)
           	return record.get(0);
   		return null;
	}

	@Override
	public Integer insertCost(CostDetail cost) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_EXPENSES_CODE", 		cost.getExpensesCode());
       	parms.put("P_WORK_NAME", 			cost.getWorkName());
       	parms.put("P_COST_YEAR", 			cost.getCostYear());
       	parms.put("P_DEPARTMENT_ID", 		cost.getDepartmentId());
       	parms.put("P_TASK_NO", 				cost.getTaskNo());
       	parms.put("P_DELIVERY_PLAN_YEAR", 	cost.getDeliveryPlanYear());
       	parms.put("P_ADJUSTMENT_PLAN_YEAR", cost.getAdjustmentPlanYear());
       	parms.put("P_DONE_TO_LASTM", 		cost.getDoneToLastm());
       	parms.put("P_DELIVERY_PLAN_CURRENTM", cost.getDeliveryPlanCurrentm());
       	parms.put("P_DONE_CURRENTM", 		cost.getDoneCurrentm());
       	parms.put("P_COMULATIVE_CURRENTM", 	cost.getComulativeCurrentm());
       	parms.put("P_REMAINING_COST", 		cost.getRemainingCost());
       	parms.put("P_RATE_DONE_LASTM", 		cost.getRateDoneLastm());
       	parms.put("P_LEADER_RESPONSIVE", 	cost.getLeaderResponsive());
       	parms.put("P_JOB_CLASSIFICATION", 	cost.getJobClassification());
       	parms.put("P_REASON_NOT_DONE", 		cost.getReasonNotDone());
       	parms.put("P_ADJUST_LASTM", 		cost.getAdjustLastm());
       	parms.put("P_STATUS_PLAN", 			cost.getStatusPlan());
       	parms.put("P_CONTRACT_NAME", 		cost.getContractName());
       	parms.put("P_CONTRACT_NO", 			cost.getContractNo());
       	parms.put("P_CONTRACT_DATE", 		cost.getContractDate());
       	parms.put("P_CONTRACT_TYPE", 		cost.getContractType());
       	parms.put("P_DEPARTMENT_DONE_CONTRACT", cost.getDepartmentDoneContract());
       	parms.put("P_WORK_CODE", 			cost.getWorkCode());
       	parms.put("P_DESCRIPTION", 			cost.getDescription());
       	parms.put("P_CREATED_BY", 			cost.getCreatedBy());
       	parms.put("P_CREATE_DATE", 			cost.getCreateDate());
       	parms.put("P_ROOT_NO", 				cost.getRootNo());
       	parms.put("P_WORK_SUPER", 			cost.getWorkSuper());
       	parms.put("P_COST_MONTH", 			cost.getCostMonth());
       	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.insertCost", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}

	@Override
	public Integer getIdSuper(String expensesCode, String departmentId,
			Integer costMonth, Integer costYear) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_EXPENSES_CODE", 		expensesCode);
		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.getIdSuper", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}

	@Override
	public String getTaskNoChildMax(Integer exSup, String departmentId,
			Integer costMonth, Integer costYear) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_WORK_SUPPER", 		exSup);
		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.getTaskNoChildMax", parms);
    	String record = (String) parms.get("P_DATA");
    	return record;
	}

	@Override
	public List<String> getCostDetailSearch(String focus, String term) {
		Map<String, Object> parms = new HashMap<String, Object>();
    	parms.put("focus", 			focus);
    	parms.put("term", 			term);
		parms.put("P_DATA", null);
    	
		@SuppressWarnings("unchecked")
		List<String> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostDetailSearch", parms);
        return record;
	}

	@Override
	public int countChilden(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", 		id);
       	parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.countChilden", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}

	@Override
	public List<CostDetail> getDetailSame(Integer superID) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_ID", 		superID);
       
   		parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getDetailSame", parms);
           return record;
	}

	@Override
	public CostDetail getCostDetailMonth(String departmentId, Integer costYear,
			Integer costMonth, String expensesCode, String workId) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_EXPENSES_CODE", 		expensesCode);
       	parms.put("P_WORK_ID", 				workId);
       	
   		parms.put("P_DATA", 				null);
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostDetailMonth", parms);
           if (record.size()>0)
           	return record.get(0);
   		return null;
	}

	/*@Override
	public Integer getIDSuperOfLastMonth(String departmentId, Integer costYear,
			Integer costMonth, String expensesCode, Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_DEPARTMENT_ID", 		departmentId);
       	parms.put("P_COST_YEAR", 			costYear);
       	parms.put("P_COST_MONTH", 			costMonth);
       	parms.put("P_EXPENSES_CODE", 		expensesCode);
       	parms.put("P_ID", 					id);
		parms.put("P_DATA", null);
    	getSqlMapClientTemplate().queryForObject("COST_DETAIL.getIDSuperOfLastMonth", parms);
    	Integer record = (Integer) parms.get("P_DATA");
    	return record;
	}*/

	@Override
	public int updateCostDetailSupper(Integer idSuper) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", 	idSuper);
        int rows = getSqlMapClientTemplate().update("COST_DETAIL.updateCostDetailSupper", parms);
        return rows;
	}

	@Override
	public List<CostSum> getSumCostByJobType(CostDetail costDetail, String column,
			int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		costDetail.getDepartmentId());
       	parms.put("P_COST_YEAR", 			costDetail.getCostYear());
       	parms.put("P_COST_MONTH", 			costDetail.getCostMonth());
       	parms.put("P_EXPENSES_SUPER", 		costDetail.getExpensesCode());
       	parms.put("P_EXPENSES_NAME", 		costDetail.getWorkName());
       	parms.put("P_ORDER", 				order);
       	parms.put("P_COLUMN",   				column);
       	parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostSum> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.sumCostByJobType", parms);
           return record;  
	}

	@Override
	public List<CostDetail> getCostNotDone(CostDetail costDetail, String column,
			int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		costDetail.getDepartmentId());
       	parms.put("P_COST_YEAR", 			costDetail.getCostYear());
       	parms.put("P_COST_MONTH", 			costDetail.getCostMonth());
       	parms.put("P_EXPENSES_SUPER", 		costDetail.getExpensesCode());
       	parms.put("P_EXPENSES_NAME", 		costDetail.getWorkName());
       	parms.put("P_ORDER", 				order);
       	parms.put("P_COLUMN",   				column);
       	parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostNotDone", parms);
           return record;  
	}

	@Override
	public List<CostDetail> getCostAriseNew(CostDetail costDetail, String column,
			int order) {
		Map<String, Object> parms = new HashMap<String, Object>();
       	parms.put("P_DEPARTMENT_ID", 		costDetail.getDepartmentId());
       	parms.put("P_COST_YEAR", 			costDetail.getCostYear());
       	parms.put("P_COST_MONTH", 			costDetail.getCostMonth());
       	parms.put("P_EXPENSES_SUPER", 		costDetail.getExpensesCode());
       	parms.put("P_EXPENSES_NAME", 		costDetail.getWorkName());
       	parms.put("P_ORDER", 				order);
       	parms.put("P_COLUMN",   				column);
       	parms.put("P_DATA", 				null);
       	
   		@SuppressWarnings("unchecked")
   		List<CostDetail> record = getSqlMapClientTemplate().queryForList("COST_DETAIL.getCostAriseNew", parms);
           return record;  
	}

	@Override
	public int updateStatusPlan(Integer id) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", 	id);
        int rows = getSqlMapClientTemplate().update("COST_DETAIL.updateStatusPlan", parms);
        return rows;
		
	}

	
	

	
}